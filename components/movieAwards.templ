package components

import (
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
)

type SectionProps interface {
	NumberOfAwards() int
	Wins() int
}

templ awardSection(props SectionProps) {
	if props.NumberOfAwards() > 0 {
		@Section("Academy Awards", props.Wins()) {
			{ children... }
		}
	}
}

type MovieAwardsProps struct {
	Awards []types.Award
	Year   string
	Won    int
}

func (p MovieAwardsProps) NumberOfAwards() int {
	return len(p.Awards)
}

func (p MovieAwardsProps) Wins() int {
	return p.Won
}

func (p MovieAwardsProps) LinkTo() templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/awards/year/%s", p.Year))
}

func (p MovieAwardsProps) NominationMsg() string {
	return utils.PluralMessage(utils.NominationKey, p.NumberOfAwards())
}

func (p MovieAwardsProps) WinMsg() string {
	return utils.PluralMessage(utils.WinKey, p.Wins())
}

templ MovieAwards(props MovieAwardsProps) {
	@awardSection(props) {
		<ul class="flex flex-col gap-2">
			for _, award := range props.Awards {
				<li class="col-span-2 flex items-baseline justify-between gap-x-4">
					<div>
						{ award.Category }{ " " }
						<div class="inline-flex">
							if len(award.Nominees) > 0 {
								<span>
									(
								</span>
								for i, n := range award.Nominees {
									if n.ID != 0 {
										<a
											class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
											href={ n.LinkTo() }
										>
											{ n.Name }
										</a>
									} else {
										{ n.Name }
									}
									if i < len(award.Nominees) - 1 {
										<span class="mr-1">
											{ ", " }
										</span>
									}
								}
								<span>
									)
								</span>
							}
							if award.Detail.Valid {
								({ award.Detail.String })
							}
						</div>
					</div>
					@Divider()
					<span>
						if award.Winner {
							Won
						} else {
							Nominated
						}
					</span>
				</li>
			}
		</ul>
		@Divider()
		<div class="flex flex-col gap-y-1 text-xs">
			<div class="flex gap-x-1">
				<span>
					All movies with 
				</span>
				<a
					class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
					href={ templ.SafeURL(fmt.Sprintf("/awards/%d?nominations=true", props.NumberOfAwards())) }
				>{ props.NominationMsg() }</a>
				if props.Won > 0 {
					<span>or</span>
					<div>
						<a
							class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
							href={ templ.SafeURL(fmt.Sprintf("/awards/%d", props.Won)) }
						>{ props.WinMsg() }</a>
					</div>
				}
			</div>
			<div class="flex gap-x-1">
				<span>
					All awards in 
				</span>
				<a
					class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
					href={ props.LinkTo() }
				>{ props.Year }</a>
			</div>
		</div>
	}
}

type PersonAwardsProps struct {
	Awards map[string][]types.Award
	Won    int
}

func (p PersonAwardsProps) NumberOfAwards() int {
	awards := 0

	for _, c := range p.Awards {
		awards = awards + len(c)
	}

	return awards
}

func (p PersonAwardsProps) Wins() int {
	return p.Won
}

templ PersonAwards(props PersonAwardsProps) {
	@awardSection(props) {
		<section class="flex flex-col gap-y-6">
			for category, awards := range props.Awards {
				<section class="flex flex-col gap-y-4">
					<h3 class="font-bold text-xs">{ category }</h3>
					<ul class="flex flex-col gap-y-2">
						for _, award := range awards {
							<li class="col-span-2 flex items-end justify-between gap-x-4">
								<span class="flex gap-x-2">
									if award.Title.Valid {
										<a
											class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
											href={ award.LinkToMovie() }
										>
											{ award.Title.String }
										</a>
									}
									<a
										class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
										href={ award.LinkToYear() }
									>
										({ award.Year })
									</a>
									if award.Detail.Valid {
										({ award.Detail.String })
									}
								</span>
								@Divider()
								<span>
									if award.Winner {
										Won
									} else {
										Nominated
									}
								</span>
							</li>
						}
					</ul>
				</section>
			}
		</section>
	}
}
