package movie

import (
	c "believer/movies/components"
	"believer/movies/components/separator"
	"fmt"
	"strconv"
	"time"
)

type WatchedAt struct {
	ID   int       `db:"id"`
	Date time.Time `db:"date"`
}

type WatchedProps struct {
	WatchedAt   []WatchedAt
	IsAdmin     bool
	IsUnseen    bool
	InWatchlist bool
	ImdbId      string
	ID          string
}

templ addWatch(id string, isUnseen bool) {
	@c.IsAuthenticated() {
		if !isUnseen {
			<a
				href="#"
				hx-post={ fmt.Sprintf("/movie/%s/seen", id) }
				class="truncate border-b border-dashed border-content-secondary link-focus"
			>
				Add new watch
			</a>
		}
	}
}

templ Watched(props WatchedProps) {
	@c.SectionWithAction("Watched", len(props.WatchedAt), addWatch(props.ID, props.IsUnseen)) {
		if len(props.WatchedAt) > 0 {
			<ol class="flex flex-col gap-2">
				for i, w := range props.WatchedAt {
					<li
						class={ "flex gap-x-4 tabular-nums items-baseline",
            templ.KV("justify-between", ctx.Value("IsAuthenticated")),
            templ.KV("grid-cols-[1ch_auto_1fr_auto]", len(props.WatchedAt) < 10),
            templ.KV("grid-cols-[2ch_auto_1fr_auto]", len(props.WatchedAt) >= 10) }
					>
						<div class="text-right tabular-nums text-content-tertiary">
							{ strconv.Itoa(len(props.WatchedAt) - i) }
						</div>
						<div>
							<div>
								{ w.Date.Format("Monday, January 02, 2006") }
							</div>
							<div class="text-content-secondary text-sm">
								{ w.Date.Format("15:04") }
							</div>
						</div>
						@c.IsAuthenticated() {
							@separator.Separator()
							<div class="flex gap-4">
								<a
									class="text-content-secondary transition-colors link-focus"
									href={ templ.SafeURL(fmt.Sprintf("/movie/%s/seen/%d/edit", props.ID, w.ID)) }
								>
									Edit
								</a>
								<button
									class="cursor-pointer text-content-secondary transition-colors link-focus"
									hx-confirm="Delete this watch date?"
									hx-delete={ fmt.Sprintf("/movie/%s/seen/%d", props.ID, w.ID) }
									hx-swap="outerHTML"
									hx-target="closest section"
								>
									Delete
								</button>
							</div>
						}
					</li>
				}
			</ol>
		} else if props.InWatchlist {
			<div class="flex gap-x-2 items-center">
				<a
					class="border-b border-dashed border-neutral-500 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
					href="/watchlist"
				>In watchlist</a>
				@c.IsAuthenticated() {
					<a href={ templ.URL(fmt.Sprintf("/movie/new?imdbId=%s&id=%s", props.ImdbId, props.ID)) } class="text-neutral-500 dark:text-neutral-400 hover:text-neutral-800 dark:hover:text-neutral-200 transition-colors" title="Add watch">
						@c.IconEye()
					</a>
				}
			</div>
		} else {
			<div class="flex gap-x-2">
				<div>No watches</div>
				<a
					class="border-b border-dashed border-neutral-500 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
					href={ templ.URL(fmt.Sprintf("/movie/new?imdbId=%s&id=%s", props.ImdbId, props.ID)) }
				>
					Add watch
				</a>
			</div>
		}
	}
}
