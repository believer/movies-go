package movie

import (
	"believer/movies/components/auth"
	"believer/movies/components/button"
	"believer/movies/components/icon"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"fmt"
	"time"
)

type WatchedAt struct {
	ID   int       `db:"id"`
	Date time.Time `db:"date"`
}

type WatchedProps struct {
	WatchedAt   []WatchedAt
	IsAdmin     bool
	IsUnseen    bool
	InWatchlist bool
	ImdbId      string
	ID          string
}

templ addWatch(id string, isUnseen bool) {
	@auth.IsAuthenticated() {
		if !isUnseen {
			<a
				href="#"
				hx-post={ fmt.Sprintf("/movie/%s/seen", id) }
				class="link focus"
			>
				Add new watch
			</a>
		}
	}
}

templ Watched(props WatchedProps) {
	@section.Section(section.Props{
		Title:         "Watched",
		NumberOfItems: len(props.WatchedAt),
		Action:        addWatch(props.ID, props.IsUnseen),
	}) {
		if len(props.WatchedAt) > 0 {
			<ol class="flex flex-col gap-2 list">
				for _, w := range props.WatchedAt {
					<li
						class={ "list__item list__item--baseline",
            templ.KV("grid grid-cols-[1ch_auto_1fr_auto]", len(props.WatchedAt) < 10),
            templ.KV("grid grid-cols-[2ch_auto_1fr_auto]", len(props.WatchedAt) >= 10) }
					>
						<div>
							<div class="text-content-primary">
								{ w.Date.Format(" January 02, 2006") }
							</div>
							<div class="text-content-secondary text-xs">
								{ w.Date.Format("15:04 (Monday)") }
							</div>
						</div>
						@auth.IsAuthenticated() {
							@separator.Separator()
							<div class="flex gap-4">
								<a
									class="button button--secondary focus"
									href={ templ.SafeURL(fmt.Sprintf("/movie/%s/seen/%d/edit", props.ID, w.ID)) }
								>
									Edit
								</a>
								@button.Button(button.Props{
									Rank: button.Secondary,
									Attrs: templ.Attributes{
										"hx-confirm": "Delete this watch date?",
										"hx-delete":  fmt.Sprintf("/movie/%s/seen/%d", props.ID, w.ID),
										"hx-swap":    "outerHTML",
										"hx-target":  "closest section",
									},
								}) {
									Delete
								}
							</div>
						}
					</li>
				}
			</ol>
		} else if props.InWatchlist {
			<div class="flex gap-x-2 items-center">
				<a
					class="border-b border-dashed border-neutral-500 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
					href="/watchlist"
				>In watchlist</a>
				@auth.IsAuthenticated() {
					<a href={ templ.URL(fmt.Sprintf("/movie/new?imdbId=%s&id=%s", props.ImdbId, props.ID)) } class="text-neutral-500 dark:text-neutral-400 hover:text-neutral-800 dark:hover:text-neutral-200 transition-colors" title="Add watch">
						@icon.Icon(icon.Props{Name: icon.Eye})
					</a>
				}
			</div>
		} else {
			<div class="flex gap-x-2">
				<div>No watches</div>
				<a
					class="border-b border-dashed border-neutral-500 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
					href={ templ.URL(fmt.Sprintf("/movie/new?imdbId=%s&id=%s", props.ImdbId, props.ID)) }
				>
					Add watch
				</a>
			</div>
		}
	}
}
