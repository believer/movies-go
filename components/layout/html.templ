package layout

import "believer/movies/components/auth"
import "believer/movies/components/icon"
import "believer/movies/components/input"
import "believer/movies/components/link"

templ Html(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			if p.Title != "" {
				<title>{ p.Title }</title>
				<meta property="og:title" content={ p.Title }/>
			} else {
				<title>Movies</title>
				<meta property="og:title" content="Movies"/>
			}
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			if p.Description != "" {
				<meta
					name="description"
					content={ p.Description }
				/>
				<meta
					property="og:description"
					content={ p.Description }
				/>
			} else {
				<meta
					name="description"
					content="The movies I've watched during my lifetime."
				/>
				<meta
					property="og:description"
					content="The movies I've watched during my lifetime."
				/>
			}
			<meta property="og:type" content="website"/>
			<meta property="og:url" content="https://movies.willcodefor.beer/"/>
			<meta name="twitter:card" content="summary"/>
			<meta name="twitter:site" content="@rnattochdag"/>
			<meta name="twitter:creator" content="@rnattochdag"/>
			<link rel="icon" type="image/png" href="/public/favicon.png"/>
			<link href="/public/styles.css" rel="stylesheet"/>
			<link rel="manifest" href="/public/manifest.webmanifest"/>
			<script defer src="/public/htmx.2.0.3.min.js"></script>
			<script defer src="/public/htmx.head-support.20240912.js"></script>
			<script defer src="/public/hyperscript.0.9.12.min.js"></script>
			<script>
        const mode = localStorage.getItem("mode")

        if (mode !== null) {
          document.querySelector('html').style.setProperty("color-scheme", mode)
        }
      </script>
		</head>
		<nav>
			<section>
				@link.Link(link.Props{Href: "/"}) {
					Home
				}
				@link.Link(link.Props{Href: "/stats"}) {
					Stats
				}
				@link.Link(link.Props{Href: "/watchlist"}) {
					Watchlist
				}
			</section>
			@auth.IsAuthenticated() {
				<section>
					@link.Link(link.Props{
						Class: "link--new",
						Href:  templ.SafeURL("/movie/new"),
						Attrs: templ.Attributes{
							"aria-label": "Add movie",
						},
					}) {
						@icon.Icon(icon.Props{Name: icon.Plus})
					}
					<button class="link link--new" popovertarget="settings" aria-label="Settings">
						@icon.Icon(icon.Props{Name: icon.Cog})
					</button>
					<div id="settings" popover class="settings">
						<div>
							<div class="input">
								@input.Label("color-scheme", "Theme")
								<select
									class="dropdown"
									id="color-scheme"
									_="
                  on load
                  if localStorage.mode is not null then
                  set my.value to localStorage.mode
                  end
                  end
                  on change
                  set the *color-scheme of <html/> to my.value
                  set localStorage.mode to my.value then
                  end
                  "
								>
									<option value="light dark">Auto</option>
									<option value="light">Light</option>
									<option value="dark">Dark</option>
								</select>
							</div>
							@link.Link(link.Props{Href: "/logout", Hx: "hx-post=/logout"}) {
								Logout
							}
						</div>
					</div>
				</section>
			}
			@auth.IsNotAuthenticated() {
				@link.Link(link.Props{Href: "/login"}) {
					Login
				}
			}
		</nav>
		<body hx-boost="true" hx-ext="head-support">
			{ children... }
		</body>
	</html>
}
