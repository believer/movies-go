package rating

import (
	"believer/movies/components/auth"
	"believer/movies/components/button"
	"believer/movies/components/input"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"fmt"
	"time"
)

type Props struct {
	MovieId int
	Rating  int64
	RatedAt time.Time
}

templ Rating(props Props) {
	@list.DlItem(list.DlProps{Detail: "My rating", ID: "rating"}) {
		@GetRating(props)
	}
}

templ GetRating(props Props) {
	<div class="rating" id="rating-value">
		@link.Link(link.Props{Href: templ.SafeURL(fmt.Sprintf("/rating/%d", props.Rating))}) {
			<time
				title={ props.RatedAt.Format("2006-01-02 15:04") }
				datetime={ props.RatedAt.Format("2006-01-02T15:04:05Z") }
			>
				{ props.Rating }
			</time>
		}
		@auth.IsAuthenticated() {
			@button.Button(button.Props{
				Rank: button.Secondary,
				Attrs: templ.Attributes{
					"hx-swap":   "outerHTML",
					"hx-target": "#rating-value",
					"hx-get":    fmt.Sprintf("/movie/%d/rating?rating=%d", props.MovieId, props.Rating),
				},
			}) {
				Edit
			}
			@button.Button(button.Props{
				Rank: button.Secondary,
				Attrs: templ.Attributes{
					"hx-swap":                       "outerHTML",
					"hx-target":                     "#rating",
					"hx-delete":                     fmt.Sprintf("/movie/%d/rating", props.MovieId),
					"hx-confirm":                    "Delete rating?",
					"hx-on::before-cleanup-element": "document.body.dispatchEvent(new Event('update-rating'))",
				},
			}) {
				Delete
			}
		}
	</div>
}

type EditRatingProps struct {
	CurrentRating int
	MovieId       int
}

templ EditRating(props EditRatingProps) {
	<form
		hx-put={ fmt.Sprintf("/movie/%d/rating", props.MovieId) }
		hx-swap="outerHTML"
		hx-on::before-cleanup-element="document.body.dispatchEvent(new Event('update-rating'))"
		class="rating"
	>
		@input.Number(input.NumberProps{
			Name:     "rating",
			Min:      0,
			Max:      10,
			Required: true,
			Value:    props.CurrentRating,
		})
		@button.Button(button.Props{Type: button.TypeSubmit}) {
			Update rating
		}
	</form>
}

type AddRatingProps struct {
	MovieId int
}

templ AddRating(props AddRatingProps) {
	@auth.IsAuthenticated() {
		@list.DlItem(list.DlProps{Detail: "My rating", ID: "rating"}) {
			@button.Button(button.Props{
				Rank: button.Secondary,
				Attrs: templ.Attributes{
					"hx-get":    fmt.Sprintf("/movie/%d/rating/edit", props.MovieId),
					"hx-target": "#rating",
					"hx-swap":   "outerHTML",
				},
			}) {
				Add rating
			}
		}
	}
}

templ AddRatingForm(props AddRatingProps) {
	@list.DlItem(list.DlProps{Detail: "My rating", ID: "rating"}) {
		<form
			hx-post={ fmt.Sprintf("/movie/%d/rating", props.MovieId) }
			hx-swap="outerHTML"
			hx-on::before-cleanup-element="document.body.dispatchEvent(new Event('update-rating'))"
			class="rating"
		>
			@input.Number(input.NumberProps{
				Name:     "rating",
				Min:      0,
				Max:      10,
				Required: true,
			})
			@button.Button(button.Props{Type: button.TypeSubmit}) {
				Save rating
			}
		</form>
	}
}
