package components

import (
	"believer/movies/types"
	"strconv"
	"fmt"
)

templ Stats(stats types.Stats, formattedTotalRuntime string, mostWatchedCast []types.PersonStats, watchedByYear []types.Bar, ratings []types.Bar, mostWatchedMovies []types.MovieStats) {
	@Layout("Stats") {
		<div class="mx-auto flex max-w-xl flex-col gap-8 px-5 py-8">
			<nav class="flex items-center gap-5">
				<a
 					class="left-8 top-10 border-b border-dashed border-neutral-500 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 md:absolute"
 					href="/"
				>
					Home
				</a>
			</nav>
			@Graph(watchedByYear, "Watched by year")
			@Graph(ratings, "Ratings")
			<section
 				class="flex flex-col gap-4 text-neutral-500 dark:text-neutral-400 md:text-sm"
			>
				@SectionTitle("Stats")
				<dl class="grid gap-x-6 gap-y-2 sm:grid-cols-[max-content_1fr]">
					<dd class="font-semibold">Unique movies seen</dd>
					<dt class="tabular-nums">{ strconv.Itoa(stats.UniqueMovies) }</dt>
					<dd class="font-semibold">Movies seen with rewatches</dd>
					<dt class="tabular-nums">{ strconv.Itoa(stats.SeenWithRewatches) }</dt>
					<dd class="font-semibold">Time watched</dd>
					<dt class="tabular-nums">{ formattedTotalRuntime }</dt>
					<dd class="font-semibold">Top IMDb rating</dd>
					<dt class="tabular-nums">
						<a
 							class="border-b border-dashed border-neutral-500 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
 							href={ templ.URL(fmt.Sprintf("/movies/%s", stats.TopImdbID)) }
						>{ stats.TopImdbTitle }</a>
						<span class="text-xs">({ strconv.FormatFloat(stats.TopImdbRating, 'f', 1, 64) })</span>
					</dt>
				</dl>
			</section>
			@MostWatchedMovies(mostWatchedMovies)
			<section
 				class="flex flex-col gap-4 md:text-sm text-neutral-500 dark:text-neutral-400"
			>
				@SectionTitle("Cast")
				<ol class="flex flex-col gap-2">
					for i, cast := range mostWatchedCast {
						<li
 							class="flex items-baseline justify-between gap-4 before:content-[attr(data-position)] before:text-right before:tabular-nums before:w-[2ch] before:text-neutral-400 dark:before:text-neutral-600"
 							data-position={ strconv.Itoa(i + 1) }
						>
							<a
 								class="border-b border-dashed border-neutral-500 dark:border-neutral-400 truncate focus:outline-none focus-visible:outline-dashed focus-visible:rounded-sm focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600"
 								href={ templ.URL(fmt.Sprintf("/person/%s", cast.ID)) }
							>
								{ cast.Name }
							</a>
							<hr
 								class="m-0 flex-1 border-dashed border-neutral-300 dark:border-neutral-700"
							/>
							<span
 								class="tabular-nums text-sm text-neutral-500 dark:text-neutral-400"
							>
								{ strconv.Itoa(cast.Count) }
							</span>
						</li>
					}
				</ol>
			</section>
			<section
 				hx-get="/stats/most-watched-person/director"
 				hx-trigger="revealed"
 				hx-swap="outerHTML"
			></section>
			<section
 				hx-get="/stats/most-watched-person/writer"
 				hx-trigger="revealed"
 				hx-swap="outerHTML"
			></section>
			<section
 				hx-get="/stats/most-watched-person/composer"
 				hx-trigger="revealed"
 				hx-swap="outerHTML"
			></section>
			<section
 				hx-get="/stats/most-watched-person/producer"
 				hx-trigger="revealed"
 				hx-swap="outerHTML"
			></section>
		</div>
	}
}
