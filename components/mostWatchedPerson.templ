package components

import (
	"believer/movies/components/empty-state"
	"believer/movies/components/separator"
	"believer/movies/types"
	"fmt"
	"strconv"
)

type HighestRatingProps struct {
	Data  []types.HighestRated
	Job   string
	Jobs  []string
	Title string
}

templ HighestRating(props HighestRatingProps) {
	@Section("", 0, 0) {
		@SectionTitleWithDropdown(props.Title) {
			@Dropdown(DropdownProps{Route: "/stats/highest-ranked-person", Name: "job", Options: props.Jobs, Value: props.Job})
		}
		if len(props.Data) > 0 {
			<ol class="flex flex-col gap-2">
				for i, item := range props.Data {
					<li class="items-end justify-between gap-x-4 grid grid-cols-[2ch_auto_1fr_auto]">
						<div class="text-right tabular-nums w-[2ch] text-neutral-400 dark:text-neutral-600">
							{ strconv.Itoa(i+1) }
						</div>
						@Link(LinkProps{Href: item.LinkTo()}) {
							{ item.Name }
						}
						@separator.Separator()
						<span class="tabular-nums text-sm text-neutral-500 dark:text-neutral-400 relative top-1">
							<span class="text-xs text-neutral-400 dark:text-neutral-600">({ strconv.Itoa(item.Appearances) } movies)</span>
							{ item.Rank() }
						</span>
					</li>
				}
			</ol>
			<div class="text-xs text-right text-neutral-500 dark:text-neutral-400">
				Only rated movies included. Score is log-adjusted average rating.
			</div>
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
	}
}

type MostWatchedPersonProps struct {
	Data  []ListItem
	Job   string
	Title string
	Total string
	Year  string
	Years []string
}

templ MostWatchedPerson(props MostWatchedPersonProps) {
	@Section("", 0, 0) {
		@SectionTitleWithDropdown(props.Title) {
			@Dropdown(DropdownProps{Route: fmt.Sprintf("/stats/most-watched-person/%s", props.Job), Name: "year", Options: props.Years, Value: props.Year})
		}
		if len(props.Data) > 0 {
			@OrderedList(props.Data, "person")
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
		<div class="text-xs text-right text-content-secondary">
			{  props.Total } people total
		</div>
	}
}

type MostWatchedGenresProps struct {
	Data  []ListItem
	Year  string
	Years []string
}

templ MostWatchedGenres(props MostWatchedGenresProps) {
	@Section("", 0, 0) {
		@SectionTitleWithDropdown("Genre") {
			@Dropdown(DropdownProps{Route: "/stats/genres", Name: "year", Options: props.Years, Value: props.Year})
		}
		if len(props.Data) > 0 {
			@OrderedList(props.Data, "genre")
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
	}
}

type MostWatchedLanguagesProps struct {
	Data  []ListItem
	Year  string
	Years []string
}

templ MostWatchedLanguages(props MostWatchedLanguagesProps) {
	@Section("", 0, 0) {
		@SectionTitleWithDropdown("Language") {
			@Dropdown(DropdownProps{Route: "/stats/languages", Name: "year", Options: props.Years, Value: props.Year})
		}
		if len(props.Data) > 0 {
			@OrderedList(props.Data, "language")
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
	}
}
