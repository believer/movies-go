package views

import (
	"believer/movies/components/dropdown"
	"believer/movies/components/empty-state"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
	"strconv"
)

type ListItem struct {
	Name  string `db:"name"`
	ID    int    `db:"id"`
	Count int    `db:"count"`
}

func (l ListItem) LinkToMovie() templ.SafeURL {
	return templ.URL(fmt.Sprintf("/movie/%s-%d", utils.Slugify(l.Name), l.ID))
}

func (l ListItem) LinkToGenre() templ.SafeURL {
	return templ.URL(fmt.Sprintf("/genre/%s-%d", utils.Slugify(l.Name), l.ID))
}

func (l ListItem) LinkToPerson() templ.SafeURL {
	return templ.URL(fmt.Sprintf("/person/%s-%d", utils.Slugify(l.Name), l.ID))
}

func (l ListItem) LinkToLanguage() templ.SafeURL {
	return templ.URL(fmt.Sprintf("/language/%s-%d", utils.Slugify(l.Name), l.ID))
}

func (l ListItem) FormattedCount() string {
	return utils.Formatter().Sprintf("%d", l.Count)
}

templ listLink(href templ.SafeURL) {
	@link.Link(link.Props{Href: href}) {
		{ children... }
	}
}

templ NumberedList(data []ListItem, listType string) {
	@list.Ol() {
		for _, item := range data {
			@list.Li(list.LiProps{Items: len(data), Style: list.Numbered}) {
				switch listType {
					case "movie":
						@listLink(item.LinkToMovie()) {
							{ item.Name }
						}
					case "person":
						@listLink(item.LinkToPerson()) {
							{ item.Name }
						}
					case "genre":
						@listLink(item.LinkToGenre()) {
							{ item.Name }
						}
					case "language":
						@listLink(item.LinkToLanguage()) {
							{ item.Name }
						}
				}
				@separator.Separator()
				<span class="tabular-nums text-sm text-content-secondary relative top-1">
					{ item.FormattedCount() }
				</span>
			}
		}
	}
}

type HighestRatingProps struct {
	Data  []types.HighestRated
	Job   string
	Jobs  []string
	Title string
}

templ HighestRating(props HighestRatingProps) {
	@section.Section(section.Props{
		Title: props.Title,
		Action: dropdown.Dropdown(dropdown.Props{
			Route:   "/stats/highest-ranked-person",
			Name:    "job",
			Options: props.Jobs,
			Value:   props.Job,
		}),
	}) {
		if len(props.Data) > 0 {
			<ol class="flex flex-col gap-2">
				for i, item := range props.Data {
					<li class="items-end justify-between gap-x-4 grid grid-cols-[2ch_auto_1fr_auto]">
						<div class="text-right tabular-nums w-[2ch] text-neutral-400 dark:text-neutral-600">
							{ strconv.Itoa(i+1) }
						</div>
						@link.Link(link.Props{Href: item.LinkTo()}) {
							{ item.Name }
						}
						@separator.Separator()
						<span class="tabular-nums text-sm text-neutral-500 dark:text-neutral-400 relative top-1">
							<span class="text-xs text-neutral-400 dark:text-neutral-600">({ strconv.Itoa(item.Appearances) } movies)</span>
							{ item.Rank() }
						</span>
					</li>
				}
			</ol>
			<div class="text-xs text-right text-neutral-500 dark:text-neutral-400">
				Only rated movies included. Score is log-adjusted average rating.
			</div>
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
	}
}

templ listOrEmpty(items []ListItem, listType string) {
	if len(items) > 0 {
		@NumberedList(items, listType)
	} else {
		@emptystate.EmptyState() {
			No movies seen
		}
	}
}

type MostWatchedPersonProps struct {
	Data  []ListItem
	Job   string
	Title string
	Total string
	Year  string
	Years []string
}

templ MostWatchedPerson(props MostWatchedPersonProps) {
	@section.Section(section.Props{
		Title: props.Title,
		Action: dropdown.Dropdown(dropdown.Props{
			Route:   fmt.Sprintf("/stats/most-watched-person/%s", props.Job),
			Name:    "year",
			Options: props.Years,
			Value:   props.Year,
		}),
	}) {
		@listOrEmpty(props.Data, "person")
		<div class="text-xs text-right text-content-secondary">
			{ props.Total } people total
		</div>
	}
}

type MostWatchedGenresProps struct {
	Data  []ListItem
	Year  string
	Years []string
}

templ MostWatchedGenres(props MostWatchedGenresProps) {
	@section.Section(section.Props{
		Title: "Genre",
		Action: dropdown.Dropdown(dropdown.Props{
			Route:   "/stats/genres",
			Name:    "year",
			Options: props.Years,
			Value:   props.Year,
		}),
	}) {
		@listOrEmpty(props.Data, "genre")
	}
}

type MostWatchedLanguagesProps struct {
	Data  []ListItem
	Year  string
	Years []string
}

templ MostWatchedLanguages(props MostWatchedLanguagesProps) {
	@section.Section(section.Props{
		Title: "Language",
		Action: dropdown.Dropdown(dropdown.Props{
			Route:   "/stats/languages",
			Name:    "year",
			Options: props.Years,
			Value:   props.Year,
		}),
	}) {
		@listOrEmpty(props.Data, "language")
	}
}
