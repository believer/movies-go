package views

import (
	"believer/movies/components/dropdown"
	"believer/movies/components/empty-state"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"fmt"
)

type HighestRatingProps struct {
	Data  []types.HighestRated
	Job   string
	Jobs  []string
	Title string
}

templ HighestRating(props HighestRatingProps) {
	@section.Section(section.Props{
		Title: props.Title,
		Action: dropdown.Dropdown(dropdown.Props{
			Route:   "/stats/highest-ranked-person",
			Name:    "job",
			Options: props.Jobs,
			Value:   props.Job,
		}),
	}) {
		if len(props.Data) > 0 {
			@list.Ol() {
				for _, item := range props.Data {
					@list.Li(list.LiProps{
						Items: len(props.Data),
						Style: list.Numbered,
					}) {
						@link.Link(link.Props{Href: item.LinkTo()}) {
							{ item.Name }
						}
						@separator.Separator()
						<span class="highest-rating__rank">
							<span class="highest-rating__movies">({ item.Appearances } movies)</span>
							<span>
								{ item.Rank() }
							</span>
						</span>
					}
				}
			}
			<div class="note">
				Only rated movies included. Score is log-adjusted average rating.
			</div>
		} else {
			@emptystate.EmptyState() {
				No movies seen
			}
		}
	}
}

type MostWatchedPersonProps struct {
	Data  []types.ListItem
	Job   string
	Title string
	Total string
	Year  string
	Years []string
}

templ MostWatchedPerson(props MostWatchedPersonProps) {
	@StatsSection(StatsSectionProps{
		Data:  props.Data,
		Title: props.Title,
		Route: fmt.Sprintf("/stats/most-watched-person/%s", props.Job),
		Root:  "person",
		Years: props.Years,
		Year:  props.Year,
	}) {
		<div class="note">
			{ props.Total } people total
		</div>
	}
}
