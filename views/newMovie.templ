package views

import (
	c "believer/movies/components"
	"believer/movies/components/input"
	"believer/movies/types"
)

type NewMovieProps struct {
	ImdbID      string
	InWatchlist bool
	Movie       types.Movie
}

templ NewMovie(props NewMovieProps) {
	@c.Layout(c.LayoutProps{Title: "Add movie"}) {
		<form
			hx-post="/movie/new"
			hx-indicator="#sending"
			class="mx-auto flex max-w-xl flex-col gap-y-6 px-4 py-8"
		>
			<div>
				@c.Link(c.LinkProps{Href: "/"}) {
					Back
				}
			</div>
			if props.Movie.ID != 0 {
				<div>
					Adding <strong>{ props.Movie.Title }</strong>
				</div>
			}
			if props.ImdbID == "" {
				<div class="flex flex-col gap-2 relative">
					@c.Label("search", "Search")
					<input
						type="text"
						hx-get="/movie/search"
						hx-trigger="keyup changed delay:500ms"
						hx-target="#search-results"
						hx-validate="true"
						minlength="3"
						name="search"
						id="search"
						class="w-full rounded-sm border border-neutral-400 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:focus:ring-neutral-500"
					/>
					<div
						id="search-results"
						class="text-xs empty:hidden rounded-sm p-2 outline-dashed outline-1 outline-neutral-400 dark:outline-neutral-500"
					></div>
				</div>
			}
			<div class="flex flex-col gap-2">
				if props.ImdbID != "" {
					@c.Label("imdb_id", "IMDb ID")
				} else {
					@c.Label("imdb_id", "IMDb ID or TMDB ID")
				}
				<input
					required
					type="text"
					hx-get="/movie/imdb"
					hx-trigger="blur-sm changed"
					hx-target="#movie-exists"
					hx-validate="true"
					name="imdb_id"
					id="imdb_id"
					class="w-full rounded-sm border border-neutral-400 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:focus:ring-neutral-500"
					if props.ImdbID != "" {
						value={ props.ImdbID }
						readonly
					}
				/>
				<div
					id="movie-exists"
					class="text-xs empty:hidden lg:absolute lg:-right-52 lg:top-6 lg:w-48 lg:rounded-sm lg:p-2 lg:outline-dashed lg:outline-offset-4 lg:outline-neutral-500"
				></div>
				@c.Help("For example, https://www.imdb.com/title/tt0111161/, or just tt0111161.")
			</div>
			@input.Number(input.NumberProps{
				Name:     "rating",
				Label:    "Rating",
				HelpText: "A value between 0 and 10",
				Min:      0,
				Max:      10,
				Required: true,
			})
			if !props.InWatchlist {
				<div class="flex gap-x-2 items-center">
					<input type="checkbox" name="watchlist" id="watchlist" class="rounded-sm accent-neutral-700 border border-neutral-700 bg-neutral-800 focus:outline-dashed focus:outline-offset-2 focus:outline-neutral-500" _="on click if me.checked remove @required from #rating otherwise add @required='' to #rating"/>
					@c.Label("watchlist", "Add to watchlist")
				</div>
			}
			<div class="flex flex-col gap-2 group">
				@c.Label("review", "Review")
				<textarea name="review" id="review" class="w-full h-40 rounded-sm border border-neutral-400 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:focus:ring-neutral-500 block"></textarea>
				<div class="flex gap-x-2 items-center">
					<input type="checkbox" name="review_private" id="review_private" class="rounded-sm accent-neutral-700 border border-neutral-700 bg-neutral-800 focus:outline-dashed focus:outline-offset-2 focus:outline-neutral-500"/>
					@c.Label("review_private", "Review is private")
				</div>
			</div>
			<details>
				<summary class="cursor-pointer">Additional fields</summary>
				<div class="mt-4 flex flex-col gap-y-6">
					@c.DateTimeInput("watched_at", "Watched at", "Defaults to current time if left empty.", "")
					<div class="flex flex-col gap-2">
						@c.Label("series", "Series")
						<input
							type="text"
							name="series"
							id="series"
							list="series_list"
							class="w-full rounded-sm border border-neutral-400 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:focus:ring-neutral-500"
							_="on keyup
                if my.value is not empty
                  add @required='' to #number_in_series
                otherwise
                  remove @required from #number_in_series
              end
              on change
                if my.value is not empty
                  put <datalist>option[value='${my.value}']/>'s @label into #series_name
                  remove .hidden from #series_name 
                otherwise
                  set #series_name's innerText to '' 
                  add .hidden to #series_name
                "
						/>
						<div class="text-xs text-content-secondary hidden" id="series_name"></div>
						<div hx-get="/movie/new/series" hx-swap="outerHTML" hx-trigger="load"></div>
					</div>
					@input.Number(input.NumberProps{
						Name:  "number_in_series",
						Label: "Number in series",
						Min:   0,
						Max:   1000,
					})
					<div class="flex gap-x-2 items-center">
						<input type="checkbox" name="wilhelm_scream" id="wilhelm_scream" class="rounded-sm accent-neutral-700 border border-neutral-700 bg-neutral-800 focus:outline-dashed focus:outline-offset-2 focus:outline-neutral-500"/>
						@c.Label("wilhelm_scream", "Wilhelm scream")
					</div>
				</div>
			</details>
			<footer class="flex flex-col gap-y-4">
				<div id="error" class="empty:hidden text-rose-700 dark:text-rose-400 border border-dashed border-rose-700 dark:border-rose-400 p-4 rounded-sm"></div>
				<button
					class="rounded-sm bg-neutral-200 px-6 py-2 text-content-primary dark:bg-neutral-700"
					type="submit"
				>
					Add
				</button>
				<div id="sending" class="htmx-indicator">Sending...</div>
			</footer>
		</form>
	}
}
