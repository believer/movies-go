package views

import (
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/seen"
	"believer/movies/components/separator"
	"believer/movies/types"
)

templ credit(title string, data types.PersonMovies) {
	if len(data) > 0 {
		@section.Section(section.Props{Title: title, NumberOfItems: len(data)}) {
			@list.Ol() {
				for _, movie := range data {
					@list.Li() {
						<div class="row">
							@link.Link(link.Props{Href: movie.LinkTo()}) {
								{ movie.Title }
							}
							@separator.Separator()
							<span class="trailing">
								@link.Link(link.Props{Href: movie.LinkToYear()}) {
									{ movie.ReleaseYear() }
								}
								@seen.Seen(seen.Props{
									Title: title,
									Seen:  movie.Seen,
									ID:    movie.ID,
								})
							</span>
						</div>
						if movie.Character != "" {
							<div class="detail">{ movie.Character }</div>
						}
					}
				}
			}
		}
	}
}

type PersonProps struct {
	Awards       map[string][]types.Award
	AwardsOrder  []string
	Person       types.Person
	TotalCredits int
	Won          int
}

templ Person(props PersonProps) {
	@layout.Layout(layout.Props{Title: props.Person.Name}) {
		<div>
			{ props.TotalCredits } credits
		</div>
		@credit("Cast", props.Person.Cast)
		@credit("Director", props.Person.Director)
		@credit("Writer", props.Person.Writer)
		@credit("Producer", props.Person.Producer)
		@credit("Composer", props.Person.Composer)
		@credit("Director of Photography", props.Person.Cinematographer)
		@credit("Editor", props.Person.Editor)
		@PersonAwards(PersonAwardsProps{
			Awards:      props.Awards,
			AwardsOrder: props.AwardsOrder,
			Won:         props.Won,
		})
	}
}
