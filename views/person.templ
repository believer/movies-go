package views

import (
	c "believer/movies/components"
	"believer/movies/components/link"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"strconv"
)

templ credit(title string, data types.PersonMovies) {
	if len(data) > 0 {
		@section.Section(section.Props{Title: title, NumberOfItems: len(data)}) {
			<ol class="flex flex-col gap-y-2 md:gap-y-3">
				for _, movie := range data {
					<li>
						<div class="flex items-end gap-x-4">
							@link.Link(link.Props{Href: movie.LinkTo(), Long: len(movie.Title) > 60}) {
								{ movie.Title }
							}
							@separator.Separator()
							<span class="flex items-center gap-x-2">
								@link.Link(link.Props{Href: movie.LinkToYear()}) {
									{ movie.ReleaseYear() }
								}
								@c.Seen(c.SeenProps{
									Title: title,
									Seen:  movie.Seen,
									ID:    movie.ID,
								})
							</span>
						</div>
						if movie.Character != "" {
							<div class="text-xs truncate relative top-1 text-content-secondary">{ movie.Character }</div>
						}
					</li>
				}
			</ol>
		}
	}
}

type PersonProps struct {
	Awards       map[string][]types.Award
	AwardsOrder  []string
	Person       types.Person
	TotalCredits int
	Won          int
}

templ Person(props PersonProps) {
	@c.Layout(c.LayoutProps{Title: props.Person.Name}) {
		@c.StandardBody(props.Person.Name) {
			<div>
				{ strconv.Itoa(props.TotalCredits) } credits
			</div>
			@credit("Cast", props.Person.Cast)
			@credit("Director", props.Person.Director)
			@credit("Writer", props.Person.Writer)
			@credit("Producer", props.Person.Producer)
			@credit("Composer", props.Person.Composer)
			@credit("Director of Photography", props.Person.Cinematographer)
			@credit("Editor", props.Person.Editor)
			@c.PersonAwards(c.PersonAwardsProps{
				Awards:      props.Awards,
				AwardsOrder: props.AwardsOrder,
				Won:         props.Won,
			})
		}
	}
}
