package views

import (
	c "believer/movies/components"
	"believer/movies/types"
	"fmt"
	"strconv"
)

type FeedProps struct {
	IsAdmin   bool
	Movies    types.Movies
	Persons   types.Persons
	NextPage  int
	Query     string
	QueryType string
}

templ Feed(props FeedProps) {
	@Layout(LayoutProps{}) {
		<nav class="flex items-center justify-between px-5 pt-5">
			<div class="flex gap-x-4">
				@c.Link(c.LinkProps{Href: "/stats"}) {
					Stats
				}
				@c.Link(c.LinkProps{Href: "/watchlist"}) {
					Watchlist
				}
			</div>
			if props.IsAdmin {
				<div class="flex gap-4 items-center">
					<a
						class="fixed bottom-8 right-8 z-20 text-neutral-900 dark:text-neutral-100 bg-neutral-200 dark:bg-neutral-700 w-14 h-14 shadow-lg flex justify-center items-center rounded-full dark:sm:shadow-transparent dark:sm:bg-transparent sm:shadow-transparent sm:bg-transparent sm:bottom-0 sm:right-0 sm:w-auto sm:h-auto sm:relative focus:outline-hidden focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-8 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600"
						href="/movie/new"
					>
						@c.IconPlus()
					</a>
					<a
						class="truncate border-b border-dashed border-neutral-500 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
						href="/logout"
						hx-post="/logout"
					>Logout</a>
				</div>
			} else {
				<div class="md:absolute right-8 top-10 flex gap-4">
					@c.Link(c.LinkProps{Href: "/login"}) {
						Login
					}
				</div>
			}
		</nav>
		<div class="mx-auto flex max-w-xl flex-col gap-12 px-5 pt-5 md:pt-0">
			<input
				aria-label="Find a movie"
				class="w-full rounded-full border border-neutral-300 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white placeholder:text-neutral-400 focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:placeholder:text-neutral-600 dark:focus:ring-neutral-500"
				type="search"
				name="search"
				placeholder="Find a movie"
				hx-get="/"
				hx-select="li[data-type]"
				hx-trigger="keyup changed delay:500ms, search"
				hx-push-url="true"
				hx-target="ol"
				minlength="3"
				hx-validate="true"
				value={ props.Query }
			/>
		</div>
		<div class="mx-auto max-w-xl px-5 py-8">
			switch props.QueryType {
				case "person":
					if len(props.Persons) > 0 {
						<ol class="flex flex-col gap-y-4 text-sm">
							for _, person := range props.Persons {
								<li data-type="list-item">
									<a
										href={ person.LinkTo() }
										class="flex justify-between items-center gap-x-4 rounded-sm focus:outline-hidden focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-8 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600"
									>
										<h2
											class="truncate text-base font-medium text-neutral-700 dark:text-neutral-300"
										>
											{ person.Name }
										</h2>
										<div class="text-xs text-neutral-500 dark:text-neutral-400">
											{ strconv.Itoa(person.NumberOfMovies) } movies
										</div>
									</a>
								</li>
							}
						</ol>
					} else {
						@c.EmptyState("No persons found")
					}
				case "movie":
					if len(props.Movies) > 0 {
						// Using space-y-6 instead of flex based setup removes the initial
						// flash when the layout is calculated
						<ol class="relative space-y-6 text-sm">
							for _, movie := range props.Movies {
								<li
									data-type="list-item"
									data-movie={ strconv.Itoa(movie.ID) }
									data-year={ movie.WatchedAt.Format("2006") }
									data-month={ movie.WatchedAt.Format("January") }
									_="
init if my @data-year is not really equal to @data-year of previous <li/> then
  set dataYear to my @data-year

  if #{dataYear} does not exist then
    make an <li.year-indicator/>
    put my @data-year into its @id
    put it before me
  then
    make an <a.year/>
    put the @data-year into its textContent
    put `/year/${dataYear}` into its href
    put it into the previous <li/>
   end
 end

init if my @data-month is not really equal to @data-month of previous <li/> then
  set y to my @data-year
  set m to my @data-month
  set ym to `${y}-${m}`

  if #{ym} does not exist then
    make an <li.month-indicator/>
    put `${ym}` into its @id
    put it before me
   then
    make an <div.month/>
    put the @data-month into its textContent
    put it at the end of the previous <li/>
  end
end
"
								>
									<a
										href={ movie.LinkTo() }
										class="flex flex-col gap-4 rounded-sm focus:outline-hidden focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-8 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600"
									>
										<header class="flex flex-col gap-1">
											<h2
												class="truncate text-base font-medium text-neutral-700 dark:text-neutral-300"
											>
												{ movie.Title }
											</h2>
											<div class="text-xs text-neutral-500 dark:text-neutral-400">
												<time
													title={ movie.WatchedAt.Format("2006-01-02 15:04") }
													datetime={ movie.WatchedAt.Format("2006-01-02T15:04:05Z") }
												>
													{ movie.WatchedAt.Format("January 02 2006") }
												</time>
												if movie.Series.Valid && movie.NumberInSeries.Valid {
													<span>
														- { movie.Series.String } #{ strconv.FormatInt( movie.NumberInSeries.Int64, 10 ) }
													</span>
												}
											</div>
										</header>
										if movie.Overview != "" {
											<p class="line-clamp-3 text-neutral-500 dark:text-neutral-400">
												{ movie.Overview }
											</p>
										}
									</a>
								</li>
							}
							<li
								hx-get={ fmt.Sprintf("/?page=%d", props.NextPage) }
								hx-trigger="revealed"
								hx-swap="outerHTML"
								hx-select="li"
							></li>
						</ol>
					} else {
						@c.EmptyState("No movies seen")
					}
			}
		</div>
	}
}
