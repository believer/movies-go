package views

import (
	"believer/movies/components/empty-state"
	"believer/movies/components/icon"
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/separator"
	"believer/movies/types"
	"fmt"
	"strconv"
)

type FeedProps struct {
	GroupedMovies map[string]types.Movies
	IsAdmin       bool
	LastHeader    string
	SortedKeys    []string
	Persons       types.Persons
	NextPage      int
	Query         string
	QueryType     string
}

templ Feed(props FeedProps) {
	@layout.Html() {
		<nav class="flex items-center justify-between px-5 pt-5">
			<div class="flex gap-x-4">
				@link.Link(link.Props{Href: "/stats"}) {
					Stats
				}
				@link.Link(link.Props{Href: "/watchlist"}) {
					Watchlist
				}
			</div>
			if props.IsAdmin {
				<div class="flex gap-4 items-center">
					@link.Link(link.Props{
						Class: "link--new",
						Href:  templ.SafeURL("/movie/new"),
					}) {
						@icon.Icon(icon.Props{Name: icon.Plus})
					}
					@link.Link(link.Props{Href: "/logout", Hx: "hx-post=/logout"}) {
						Logout
					}
				</div>
			} else {
				@link.Link(link.Props{Href: "/login"}) {
					Login
				}
			}
		</nav>
		<div class="mx-auto flex max-w-xl flex-col gap-12 px-5 pt-5 md:pt-0">
			<input
				aria-label="Find a movie"
				class="w-full rounded-full border border-neutral-300 bg-transparent px-4 py-2 ring-offset-2 ring-offset-white placeholder:text-neutral-400 focus:outline-hidden focus:ring-2 focus:ring-neutral-400 dark:border-neutral-700 dark:ring-offset-neutral-900 dark:placeholder:text-neutral-600 dark:focus:ring-neutral-500"
				type="search"
				name="search"
				placeholder="Find a movie"
				hx-get="/"
				hx-select="li[data-type]"
				hx-trigger="keyup changed delay:500ms, search"
				hx-target="ol"
				minlength="3"
				hx-validate="true"
				value={ props.Query }
			/>
		</div>
		<div class="mx-auto max-w-xl px-5 py-8">
			switch props.QueryType {
				case "person":
					if len(props.Persons) > 0 {
						<ol class="feed-list feed-list--person">
							for _, person := range props.Persons {
								@list.Li(list.LiProps{
									DataType: "list-item",
								}) {
									@link.Link(link.Props{Href: person.LinkTo()}) {
										{ person.Name }
									}
									@separator.Separator()
									<div class="text-xs text-content-secondary">
										{ strconv.Itoa(person.NumberOfMovies) } movies
									</div>
								}
							}
						</ol>
					} else {
						@emptystate.EmptyState() {
							No persons found
						}
					}
				case "movie":
					if len(props.GroupedMovies) > 0 {
						<ol class="feed-list">
							{{ var currentHeader = props.LastHeader }}
							{{ var currentYear = currentHeader[:4] }}
							for _, k := range props.SortedKeys {
								{{ var year = k[:4] }}
								{{ currentHeader = k }}
								if currentYear != year {
									<li class="feed-list__year-wrap">
										<a class="feed-list__year focus" href={ templ.SafeURL(fmt.Sprintf("/year/%s", year)) }>
											{ year }
										</a>
									</li>
								}
								if props.LastHeader != currentHeader {
									<li class="feed-list__month-wrap">
										<div class="feed-list__month">
											{ currentHeader[8:] }
										</div>
									</li>
								}
								{{ currentYear = year }}
								for _, movie := range props.GroupedMovies[k] {
									<li
										data-type="list-item"
										data-movie={ strconv.Itoa(movie.ID) }
										data-year={ movie.WatchedAt.Format("2006") }
										data-month={ movie.WatchedAt.Format("January") }
									>
										<a href={ movie.LinkTo() } class="feed-list__card focus">
											<header>
												<h2>{ movie.Title } </h2>
												<div class="subtitle">
													<time
														title={ movie.WatchedAt.Format("2006-01-02 15:04") }
														datetime={ movie.WatchedAt.Format("2006-01-02T15:04:05Z") }
													>
														{ movie.WatchedAt.Format("January 2 2006") }
													</time>
													if movie.Series.Valid && movie.NumberInSeries.Valid {
														<span>
															- { movie.Series.String } #{ strconv.FormatInt( movie.NumberInSeries.Int64, 10 ) }
														</span>
													}
												</div>
											</header>
											if movie.Overview != "" {
												<p class="feed-list__overview">
													{ movie.Overview }
												</p>
											}
										</a>
									</li>
								}
							}
							if props.Query == "" {
								<li
									data-type="list-item-pagination"
									hx-get={ fmt.Sprintf("/?page=%d&last-header=%s", props.NextPage, currentHeader) }
									hx-trigger="revealed"
									hx-swap="outerHTML"
									hx-select="li"
								></li>
							}
						</ol>
					} else {
						@emptystate.EmptyState() {
							No movies seen
						}
					}
			}
		</div>
	}
}
