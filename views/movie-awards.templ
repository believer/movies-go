package views

import (
	"believer/movies/components/link"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
)

type SectionProps interface {
	Href() templ.SafeURL
	NumberOfAwards() int
	Subtitle() string
	Title() string
	Wins() int
}

templ awardSection(props SectionProps) {
	if props.NumberOfAwards() > 0 {
		@section.Section(section.Props{
			Href:     props.Href(),
			Title:    props.Title(),
			Subtitle: props.Subtitle(),
		}) {
			{ children... }
		}
	}
}

type MovieAwardsProps struct {
	Awards []types.Award
	Year   string
	Won    int
}

func (p MovieAwardsProps) Subtitle() string {
	wins := p.Wins()

	if p.Wins() == 0 {
		return fmt.Sprintf("%s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()))
	}

	return fmt.Sprintf("%s / %s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()), utils.PluralMessage(utils.WinKey, wins))
}

func (p MovieAwardsProps) NumberOfAwards() int {
	return len(p.Awards)
}

func (p MovieAwardsProps) Wins() int {
	return p.Won
}

func (p MovieAwardsProps) Title() string {
	return fmt.Sprintf("Academy Awards %s", p.Year)
}

func (p MovieAwardsProps) Href() templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/awards/year/%s", p.Year))
}

func (p MovieAwardsProps) NominationMsg() string {
	return utils.PluralMessage(utils.NominationKey, p.NumberOfAwards())
}

func (p MovieAwardsProps) WinMsg() string {
	return utils.PluralMessage(utils.WinKey, p.Wins())
}

templ MovieAwards(props MovieAwardsProps) {
	@awardSection(props) {
		<ul class="flex flex-col gap-2">
			for _, award := range props.Awards {
				<li>
					<div class="flex items-baseline justify-between gap-x-4">
						<div>
							{ award.Category }{ " " }
						</div>
						@separator.Separator()
						<span>
							if award.Winner {
								Won
							} else {
								Nominated
							}
						</span>
					</div>
					if len(award.Nominees) > 0 {
						<div class="inline-flex text-xs truncate max-w-full">
							<span>
								(
							</span>
							for i, n := range award.Nominees {
								if n.ID != 0 {
									@link.TruncatedLink(link.TruncatedLinkProps{Href: n.LinkTo()}) {
										{ n.Name }
									}
								} else {
									{ n.Name }
								}
								if i < len(award.Nominees) - 1 {
									<span class="mr-1">
										{ ", " }
									</span>
								}
							}
							<span>
								)
							</span>
						</div>
					}
					if award.Detail.Valid {
						<div class="inline-flex text-xs truncate max-w-full">
							({ award.Detail.String })
						</div>
					}
				</li>
			}
		</ul>
		<div class="flex flex-col gap-y-1 text-xs">
			<div class="flex gap-x-1">
				<span>
					All movies with 
				</span>
				<a
					class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
					href={ templ.SafeURL(fmt.Sprintf("/awards/%d?nominations=true", props.NumberOfAwards())) }
				>{ props.NominationMsg() }</a>
				if props.Won > 0 {
					<span>or</span>
					<div>
						<a
							class="border-b border-dashed border-neutral-500 focus-visible:outline-1 focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600 whitespace-nowrap"
							href={ templ.SafeURL(fmt.Sprintf("/awards/%d", props.Won)) }
						>{ props.WinMsg() }</a>
					</div>
				}
			</div>
		</div>
	}
}

type PersonAwardsProps struct {
	Awards      map[string][]types.Award
	AwardsOrder []string
	Won         int
}

func (p PersonAwardsProps) Subtitle() string {
	return fmt.Sprintf("%s / %s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()), utils.PluralMessage(utils.WinKey, p.Wins()))
}

func (p PersonAwardsProps) NumberOfAwards() int {
	awards := 0

	for _, c := range p.Awards {
		awards = awards + len(c)
	}

	return awards
}

func (p PersonAwardsProps) Wins() int {
	return p.Won
}

func (p PersonAwardsProps) Title() string {
	return "Academy Awards"
}

func (p PersonAwardsProps) Href() templ.SafeURL {
	return templ.SafeURL("")
}

templ PersonAwards(props PersonAwardsProps) {
	@awardSection(props) {
		<section class="flex flex-col gap-y-6">
			for _, category := range props.AwardsOrder {
				{{ var awards []types.Award }}
				{{ awards = props.Awards[category] }}
				<section class="flex flex-col gap-y-4">
					<h3 class="font-bold text-xs">{ category }</h3>
					<ul class="flex flex-col gap-y-2">
						for _, award := range awards {
							<li class="flex items-end justify-between gap-x-4">
								if award.Title.Valid {
									@link.TruncatedLink(link.TruncatedLinkProps{Href: award.LinkToMovie()}) {
										{ award.Title.String }
									}
								}
								if award.Detail.Valid {
									({ award.Detail.String })
								}
								@separator.Separator()
								<span class="items-end">
									if award.Winner {
										Won
									} else {
										Nominated
									}
								</span>
								<span class="flex items-center gap-x-2 whitespace-nowrap">
									@link.Link(link.Props{Href: award.LinkToYear()}) {
										{ award.Year }
									}
								</span>
							</li>
						}
					</ul>
				</section>
			}
		</section>
	}
}
