package views

import (
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
)

type SectionProps interface {
	Href() templ.SafeURL
	NumberOfAwards() int
	Subtitle() string
	Title() string
	Wins() int
}

templ awardSection(props SectionProps) {
	if props.NumberOfAwards() > 0 {
		@section.Section(section.Props{
			Href:     props.Href(),
			Title:    props.Title(),
			Subtitle: props.Subtitle(),
			Style:    "--gap: var(--spacing-6)",
		}) {
			{ children... }
		}
	}
}

type MovieAwardsProps struct {
	Awards []types.Award
	Year   string
	Won    int
}

func (p MovieAwardsProps) Subtitle() string {
	wins := p.Wins()

	if p.Wins() == 0 {
		return fmt.Sprintf("%s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()))
	}

	return fmt.Sprintf("%s / %s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()), utils.PluralMessage(utils.WinKey, wins))
}

func (p MovieAwardsProps) NumberOfAwards() int {
	return len(p.Awards)
}

func (p MovieAwardsProps) Wins() int {
	return p.Won
}

func (p MovieAwardsProps) Title() string {
	return fmt.Sprintf("Academy Awards %s", p.Year)
}

func (p MovieAwardsProps) Href() templ.SafeURL {
	return templ.SafeURL(fmt.Sprintf("/awards/year/%s", p.Year))
}

func (p MovieAwardsProps) NominationMsg() string {
	return utils.PluralMessage(utils.NominationKey, p.NumberOfAwards())
}

func (p MovieAwardsProps) WinMsg() string {
	return utils.PluralMessage(utils.WinKey, p.Wins())
}

templ MovieAwards(props MovieAwardsProps) {
	@awardSection(props) {
		@list.Ol() {
			for _, award := range props.Awards {
				@list.Li() {
					<div class="row">
						<div>
							{ award.Category }
						</div>
						@separator.Separator()
						<span>
							if award.Winner {
								Won
							} else {
								Nominated
							}
						</span>
					</div>
					if len(award.Nominees) > 0 {
						<div class="detail">
							for i, n := range award.Nominees {
								if n.ID != 0 {
									@link.Link(link.Props{
										Href: n.LinkTo(),
										Style: map[string]templ.SafeCSSProperty{
											"--color":     "var(--color-content-secondary)",
											"--font-size": "var(--text-xs)",
										},
									}) {
										{ n.Name }
									}
								} else {
									{ n.Name }
								}
								if i < len(award.Nominees) - 1 {
									<span class="comma">
										{ ", " }
									</span>
								}
							}
						</div>
					}
					if award.Detail.Valid {
						<div class="detail">
							({ award.Detail.String })
						</div>
					}
				}
			}
		}
		<div class="movie-awards__meta">
			<span>
				All movies with 
			</span>
			<a
				class="link"
				href={ templ.SafeURL(fmt.Sprintf("/awards/%d?nominations=true", props.NumberOfAwards())) }
			>{ props.NominationMsg() }</a>
			if props.Won > 0 {
				<span>or</span>
				<div>
					<a
						class="link"
						href={ templ.SafeURL(fmt.Sprintf("/awards/%d", props.Won)) }
					>{ props.WinMsg() }</a>
				</div>
			}
		</div>
	}
}

type PersonAwardsProps struct {
	Awards      map[string][]types.Award
	AwardsOrder []string
	Won         int
}

func (p PersonAwardsProps) Subtitle() string {
	return fmt.Sprintf("%s / %s", utils.PluralMessage(utils.NominationKey, p.NumberOfAwards()), utils.PluralMessage(utils.WinKey, p.Wins()))
}

func (p PersonAwardsProps) NumberOfAwards() int {
	awards := 0

	for _, c := range p.Awards {
		awards = awards + len(c)
	}

	return awards
}

func (p PersonAwardsProps) Wins() int {
	return p.Won
}

func (p PersonAwardsProps) Title() string {
	return "Academy Awards"
}

func (p PersonAwardsProps) Href() templ.SafeURL {
	return templ.SafeURL("")
}

templ PersonAwards(props PersonAwardsProps) {
	@awardSection(props) {
		for _, category := range props.AwardsOrder {
			{{ var awards []types.Award }}
			{{ awards = props.Awards[category] }}
			<section class="section" style="--gap: var(--spacing-4); --trailing-gap: var(--spacing-4);">
				<h3>{ category }</h3>
				@list.Ol() {
					for _, award := range awards {
						@list.Li() {
							if award.Title.Valid {
								@link.Link(link.Props{Href: award.LinkToMovie()}) {
									{ award.Title.String }
								}
							}
							if award.Detail.Valid {
								({ award.Detail.String })
							}
							@separator.Separator()
							<span class="trailing">
								<span>
									if award.Winner {
										Won
									} else {
										Nominated
									}
								</span>
								@link.Link(link.Props{Href: award.LinkToYear()}) {
									{ award.Year }
								}
							</span>
						}
					}
				}
			</section>
		}
	}
}
