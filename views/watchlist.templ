package views

import (
	c "believer/movies/components"
	"believer/movies/components/empty-state"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"fmt"
)

type WatchlistProps struct {
	Movies           types.Movies
	UnreleasedMovies types.Movies
}

templ sortWatchlist(route string, currentOrder string) {
	@c.Dropdown(c.DropdownProps{
		Name:    "sortOrder",
		Route:   route,
		Options: []string{"Date added", "Release date"},
		Value:   currentOrder,
	})
}

templ WatchlistList(movies types.Movies, title string, route string, currentOrder string) {
	@section.Section(section.Props{
		Action:        sortWatchlist(route, currentOrder),
		NumberOfItems: len(movies),
		Title:         title,
	}) {
		<ol class="flex flex-col gap-2 md:text-sm text-content-secondary">
			for _, movie := range movies {
				<li class="flex items-end justify-between gap-4">
					@c.Link(c.LinkProps{Href: movie.LinkTo()}) {
						{ movie.Title }
					}
					@separator.Separator()
					<span class="flex items-center gap-x-2 relative top-1">
						<span class="tabular-nums whitespace-nowrap">
							if currentOrder == "Date added" {
								@c.SimpleLink(c.SimpleLinkProps{Href: movie.LinkToCreatedYear()}) {
									{ movie.ISOCreatedDate() }
								}
							} else if currentOrder == "Release date" {
								@c.SimpleLink(c.SimpleLinkProps{Href: movie.LinkToCreatedYear()}) {
									{ movie.ISOReleaseDate() }
								}
							}
						</span>
						@c.IsAuthenticated() {
							<a href={ movie.LinkToWatchlistAdd() } class="text-content-secondary hover:text-neutral-800 dark:hover:text-neutral-200 transition-colors" title="Add watch">
								@c.IconEye()
							</a>
							<button
								class="cursor-pointer text-content-quarternary hover:text-neutral-700 hover:dark:text-neutral-300 transition-colors"
								hx-target="closest li"
								hx-swap="outerHTML"
								hx-delete={ fmt.Sprintf("/watchlist/%d", movie.ID) }
								hx-confirm={ fmt.Sprintf("Delete %s from watchlist?", movie.Title) }
							>
								Delete
							</button>
						}
					</span>
				</li>
			}
		</ol>
	}
}

templ Watchlist(props WatchlistProps) {
	@c.Layout(c.LayoutProps{Title: "Watchlist"}) {
		@c.StandardBody("Watchlist") {
			if len(props.Movies) > 0 {
				@WatchlistList(props.Movies, "Movies", "/watchlist/movies", "Date added")
			} else {
				@emptystate.EmptyState() {
					Watchlist empty
				}
			}
			if len(props.UnreleasedMovies) > 0 {
				@WatchlistList(props.UnreleasedMovies, "Unreleased movies", "/watchlist/unreleased-movies", "Release date")
			}
		}
	}
}
