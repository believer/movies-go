package views

import (
	"believer/movies/components"
	"believer/movies/types"
	"strconv"
)

type SeriesProps struct {
	TotalMovies int
	Series      types.Series
	Movies      []types.SeriesMovies
}

templ list(movies types.Movies) {
	@components.Ol() {
		for _, movie := range movies {
			<li
				class="flex items-end justify-between gap-x-4 before:content-[attr(data-position)] before:text-right before:tabular-nums before:w-[2ch] before:text-neutral-400 dark:before:text-neutral-600"
				if movie.NumberInSeries.Valid {
					data-position={ strconv.FormatInt(movie.NumberInSeries.Int64, 10) }
				}
			>
				@components.Link(components.LinkProps{Href: movie.LinkTo(), Long: len(movie.Title) > 60}) {
					{ movie.Title }
				}
				@components.Divider()
				<span class="flex items-center gap-x-2 tabular-nums whitespace-nowrap text-sm">
					@components.SimpleLink(components.SimpleLinkProps{Href: movie.LinkToYear()}) {
						{ movie.ISOReleaseDate() }
					}
					@Seen(SeenProps{
						Title:  "genre",
						Seen:   movie.Seen,
						ImdbId: movie.ImdbId,
						ID:     movie.ID,
					})
				</span>
			</li>
		}
	}
}

templ Series(props SeriesProps) {
	@Layout(LayoutProps{Title: props.Series.Name}) {
		@StandardBody(props.Series.Name) {
			<section>
				if props.Series.ParentSeries.Valid {
					@components.SimpleLink(components.SimpleLinkProps{Href: props.Series.LinkToParent()}) {
						Go to parent series
					}
				}
			</section>
			if props.TotalMovies > 0 {
				for _, series := range props.Movies {
					if len(props.Movies) == 1 {
						@list(series.Movies)
					} else if len(series.Movies) > 0 {
						@components.LinkedSection(series.Name, series.LinkTo(), len(series.Movies)) {
							@list(series.Movies)
						}
					} else if series.Name != props.Series.Name {
						@components.LinkedSectionTitle(series.Name, series.LinkTo())
					}
				}
			} else {
				@components.EmptyState("No movies in series")
			}
		}
	}
}
