package views

import (
	c "believer/movies/components"
	"believer/movies/components/empty-state"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/separator"
	"believer/movies/types"
)

type SeriesProps struct {
	TotalMovies int
	Seen        int
	Series      types.Series
	Movies      []types.SeriesMovies
}

templ seriesList(movies types.MoviesInSeries) {
	@list.Ol() {
		for _, movie := range movies {
			@list.Li(list.LiProps{Items: len(movies)}) {
				@list.Number(movie.NumberInSeries.Int64)
				@link.Link(link.Props{Href: movie.LinkTo()}) {
					{ movie.Title }
				}
				@separator.Separator()
				@list.Trailing() {
					@link.Link(link.Props{Href: movie.LinkToYear()}) {
						{ movie.ISOReleaseDate() }
					}
					@Seen(SeenProps{
						Title:  "genre",
						Seen:   movie.Seen,
						ImdbId: movie.ImdbId,
						ID:     movie.ID,
					})
				}
			}
		}
	}
}

templ section(series types.SeriesMovies) {
	<section class="flex flex-col gap-y-4">
		@seriesList(series.Movies)
		<div class="text-xs text-right text-content-secondary">
			{ series.SeenInSeries() }
		</div>
	</section>
}

templ Series(props SeriesProps) {
	@c.Layout(c.LayoutProps{Title: props.Series.Name}) {
		@c.StandardBody(props.Series.Name) {
			if len(props.Series.ParentSeries) > 0 {
				<section class="flex flex-col gap-y-2">
					for _, parent := range props.Series.ParentSeries {
						<div>
							@link.Link(link.Props{Href: parent.LinkTo()}) {
								Go to { parent.Name } series
							}
						</div>
					}
				</section>
			}
			if props.TotalMovies > 0 {
				for _, series := range props.Movies {
					if len(props.Movies) == 1 {
						@section(series)
					} else if len(series.Movies) > 0 {
						@c.LinkedSection(series.Name, series.LinkTo(), len(series.Movies)) {
							@section(series)
						}
					} else if series.Name != props.Series.Name {
						@c.LinkedSectionTitle(series.Name, series.LinkTo())
					}
				}
			} else {
				@emptystate.EmptyState() {
					No movies in series
				}
			}
		}
	}
}
