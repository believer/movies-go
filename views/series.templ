package views

import (
	"believer/movies/components/empty-state"
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/seen"
	"believer/movies/components/separator"
	"believer/movies/types"
)

type SeriesProps struct {
	TotalMovies int
	Seen        int
	Series      types.Series
	Movies      []types.SeriesMovies
}

templ seriesList(movies types.MoviesInSeries) {
	@list.Ol() {
		for _, movie := range movies {
			@list.Li(list.LiProps{Items: len(movies), Style: list.Numbered}) {
				@link.Link(link.Props{Href: movie.LinkTo()}) {
					{ movie.Title }
				}
				@separator.Separator()
				@list.Trailing() {
					@link.Link(link.Props{Href: movie.LinkToYear()}) {
						{ movie.ISOReleaseDate() }
					}
					@seen.Seen(seen.Props{
						Title:  "genre",
						Seen:   movie.Seen,
						ImdbId: movie.ImdbId,
						ID:     movie.ID,
					})
				}
			}
		}
	}
}

templ seriesSection(series types.SeriesMovies) {
	<section class="section">
		@seriesList(series.Movies)
		<div class="note">
			{ series.SeenInSeries() }
			{ series.Runtime() }
		</div>
	</section>
}

templ Series(props SeriesProps) {
	@layout.Layout(layout.Props{Title: props.Series.Name}) {
		// The series has a parent series
		if len(props.Series.ParentSeries) > 0 {
			<section class="section" style="--gap: var(--spacing-2);">
				for _, parent := range props.Series.ParentSeries {
					<div>
						@link.Link(link.Props{Href: parent.LinkTo()}) {
							Go to { parent.Name } series
						}
					</div>
				}
			</section>
		}
		if props.TotalMovies > 0 {
			for _, series := range props.Movies {
				if len(props.Movies) == 1 {
					// A leaf node, the last series in a parent/child relationship
					// Example: MCU: Phase Six
					@seriesSection(series)
				} else if len(series.Movies) > 0 {
					// Sectioned content when inside a parent series
					// Example: MCU: The Multiverse Saga
					@section.Section(section.Props{
						Title:         series.Name,
						Href:          series.LinkTo(),
						NumberOfItems: len(series.Movies),
					}) {
						@seriesSection(series)
					}
				} else if series.Name != props.Series.Name {
					// Section without any movies, a parent series that only contains child series
					// Example: MCU
					@section.Section(section.Props{Title: series.Name, Href: series.LinkTo()})
				}
			}
		} else {
			@emptystate.EmptyState() {
				No movies in series
			}
		}
	}
}
