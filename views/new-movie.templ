package views

import (
	"believer/movies/components/button"
	"believer/movies/components/checkbox"
	"believer/movies/components/collapsible"
	"believer/movies/components/input"
	"believer/movies/components/layout"
	"believer/movies/components/textarea"
	"believer/movies/types"
)

type NewMovieProps struct {
	ImdbID      string
	InWatchlist bool
	Movie       types.Movie
}

templ NewMovie(props NewMovieProps) {
	@layout.Html(layout.Props{Title: "Add movie"}) {
		<form
			hx-post="/movie/new"
			hx-indicator="button[type='submit']"
			class="form"
		>
			if props.Movie.ID != 0 {
				<div>
					<strong>{ props.Movie.Title }</strong>
				</div>
			}
			if props.ImdbID == "" {
				<div class="input">
					@input.Label("search", "Search")
					<input
						type="text"
						hx-get="/movie/search"
						hx-trigger="keyup changed delay:500ms"
						hx-target="next .search-results"
						hx-validate="true"
						minlength="3"
						name="search"
						id="search"
					/>
					<div class="search-results"></div>
				</div>
			}
			<div class="input">
				if props.ImdbID != "" {
					@input.Label("imdb_id", "IMDb ID")
				} else {
					@input.Label("imdb_id", "IMDb ID or TMDB ID")
				}
				<input
					required
					type="text"
					hx-get="/movie/imdb"
					hx-trigger="input changed"
					hx-target="next .search-results"
					hx-validate="true"
					name="imdb_id"
					id="imdb_id"
					if props.ImdbID != "" {
						value={ props.ImdbID }
						readonly
					}
				/>
				@input.Help("For example, https://www.imdb.com/title/tt0111161/, or just tt0111161.")
				<div class="search-results"></div>
			</div>
			@input.Number(input.NumberProps{
				Name:     "rating",
				Label:    "Rating",
				HelpText: "A value between 0 and 10",
				Min:      0,
				Max:      10,
				Required: true,
			})
			if !props.InWatchlist {
				@checkbox.Checkbox(checkbox.Props{
					Name:        "watchlist",
					Label:       "Add to watchlist",
					Hyperscript: "on click if me.checked remove @required from #rating otherwise add @required='' to #rating",
				})
			}
			@textarea.Textarea(textarea.Props{
				Name:  "review",
				Label: "Review",
			}) {
				@checkbox.Checkbox(checkbox.Props{
					Name:  "review_private",
					Label: "Review is private",
				})
			}
			@collapsible.Collapsible(collapsible.Props{
				Title: "Additional fields",
			}) {
				@input.DateTime(input.DateTimeProps{
					Name:     "watched_at",
					Label:    "Watched at",
					HelpText: "Defaults to current time if left empty.",
				})
				<div class="new-movie__series">
					@input.Text(input.TextProps{
						Name:  "series",
						Label: "Series",
						List:  "series_list",
						Hyperscript: `
            on keyup
            if my.value is not empty
            add @required='' to #number_in_series
            otherwise
            remove @required from #number_in_series
            end
            on change
            if my.value is not empty
            put <datalist>option[value='${my.value}']/>'s @label into #series_name
            remove .hidden from #series_name 
            otherwise
            set #series_name's innerText to '' 
            add .hidden to #series_name
            end
            `,
					}) {
						<div class="new-movie__selected-series" id="series_name"></div>
						<div hx-get="/movie/new/series" hx-swap="outerHTML" hx-trigger="load"></div>
					}
					@input.Number(input.NumberProps{
						Name:  "number_in_series",
						Label: "Number in series",
						Min:   0,
						Max:   1000,
					})
				</div>
				@checkbox.Checkbox(checkbox.Props{
					Name:  "wilhelm_scream",
					Label: "Wilhelm scream",
				})
			}
			<footer>
				<div id="error" class="form__error"></div>
				@button.Button(button.Props{Type: button.TypeSubmit}) {
					Add
				}
			</footer>
		</form>
	}
}
