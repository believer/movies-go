package views

import (
	"believer/movies/components"
	"believer/movies/types"
	"fmt"
	"strconv"
)

// TODO: View transition of elements doesn't work because we can't have a
// parameterized "style" attribute in the template. At least yet...
// https://github.com/a-h/templ/issues/88
templ Movie(movie types.Movie, back bool) {
	@Layout(LayoutProps{Title: movie.Title, Description: movie.Overview}) {
		<div class="mx-auto flex max-w-xl flex-col gap-8 px-5 py-8">
			@components.H1(movie.Title, back)
			if movie.Overview != "" {
				<p class="text-neutral-500 dark:text-neutral-400">{ movie.Overview }</p>
			}
			@components.Section("Metadata", 0) {
				@components.DescriptionList() {
					if movie.Tagline != "" {
						@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Tagline"}) {
							{ movie.Tagline }
						}
					}
					@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Release date"}) {
						<a
							class="inline-flex items-center gap-1 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600 border-b border-dashed border-neutral-500 dark:border-neutral-400"
							href={ templ.URL(fmt.Sprintf("/year/%s", movie.ReleaseDate.Format("2006"))) }
						>
							{ movie.ReleaseDate.Format("2006-01-02") }
						</a>
					}
					if movie.Runtime != 0 {
						@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Runtime"}) {
							{ movie.RuntimeFormatted() }
						}
					}
					if movie.Series.Valid && movie.NumberInSeries.Valid {
						@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Series"}) {
							{ movie.Series.String } #{ strconv.FormatInt( movie.NumberInSeries.Int64, 10 ) }
						}
					}
					@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "IMDb"}) {
						<a
							href={ templ.URL(fmt.Sprintf("https://www.imdb.com/title/%s", movie.ImdbId)) }
							class="inline-flex items-center gap-1 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600"
							target="_blank"
							rel="noopener noreferrer"
						>
							<span
								class="border-b border-dashed border-neutral-500 dark:border-neutral-400"
							>
								{ movie.ImdbId }
							</span>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke-width="1.5"
								stroke="currentColor"
								class="h-4 w-4"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"
								></path>
							</svg>
						</a>
					}
					@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Genres", IsTabular: false}) {
						<div class="flex gap-x-2">
							for _, genre := range movie.Genres {
								<a
									class="inline-flex items-center gap-1 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600 border-b border-dashed border-neutral-500 dark:border-neutral-400"
									href={ templ.URL(fmt.Sprintf("/genre/%d", genre.ID)) }
								>
									{ genre.Name }
								</a>
							}
						</div>
					}
					if movie.Rating.Valid {
						@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Rating", IsTabular: false}) {
							{ strconv.FormatInt(movie.Rating.Int64, 10) }
						}
					}
					@components.DescriptionListItem(components.DescriptionListItemProps{Detail: "Watched", IsTabular: false}) {
						<span hx-get={ fmt.Sprintf("/movie/%d/seen?imdbId=%s", movie.ID, movie.ImdbId) } hx-trigger="load"></span>
					}
				}
			}
			<div
				hx-get={ fmt.Sprintf("/movie/%d/cast", movie.ID) }
				hx-trigger="load"
				hx-swap="outerHTML"
			></div>
		</div>
	}
}
