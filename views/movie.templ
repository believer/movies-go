package views

import (
	"believer/movies/components/icon"
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/movie"
	"believer/movies/components/rating"
	"believer/movies/components/review"
	"believer/movies/components/section"
	"believer/movies/components/seen"
	"believer/movies/types"
	"fmt"
)

// TODO: View transition of elements doesn't work because we can't have a
// parameterized "style" attribute in the template. At least yet...
// https://github.com/a-h/templ/issues/88

type MovieProps struct {
	Back          bool
	IsInWatchlist bool
	Movie         types.Movie
	Cast          []CastDTO
	HasCharacters bool
	Others        types.OthersStats
	WatchedAt     []movie.WatchedAt
	Review        types.Review
}

templ Movie(props MovieProps) {
	@layout.Layout(layout.Props{Title: props.Movie.Title, Description: props.Movie.Overview}) {
		if props.Movie.Overview != "" {
			<p class="movie__overview">{ props.Movie.Overview }</p>
		}
		@review.Review(props.Review)
		@section.Section(section.Props{Title: "Metadata"}) {
			@list.Dl() {
				if props.Movie.Tagline != "" {
					@list.DlItem(list.DlProps{Detail: "Tagline"}) {
						{ props.Movie.Tagline }
					}
				}
				if props.Movie.OriginalTitle.Valid && props.Movie.OriginalTitle.String != props.Movie.Title {
					@list.DlItem(list.DlProps{Detail: "Original title"}) {
						{ props.Movie.OriginalTitle.String }
					}
				}
				if props.Movie.ReleaseDate.Valid {
					@list.DlItem(list.DlProps{Detail: "Release date"}) {
						@link.Link(link.Props{Href: props.Movie.LinkToYear()}) {
							{ props.Movie.ISOReleaseDate() }
						}
					}
				}
				if props.Movie.Runtime != 0 {
					@list.DlItem(list.DlProps{Detail: "Runtime"}) {
						{ props.Movie.RuntimeFormatted() }
					}
				}
				if props.Movie.Series.Valid && props.Movie.NumberInSeries.Valid {
					@list.DlItem(list.DlProps{Detail: "Series"}) {
						@link.Link(link.Props{Href: props.Movie.LinkToSeries()}) {
							{ props.Movie.Series.String } #{  props.Movie.NumberInSeries.Int64 }
						}
					}
				}
				if props.Movie.ImdbId != "tt0000000" {
					@list.DlItem(list.DlProps{Detail: "IMDb"}) {
						@link.Link(link.Props{
							Href:       templ.URL(fmt.Sprintf("https://www.imdb.com/title/%s", props.Movie.ImdbId)),
							IsExternal: true,
							Class:      "link--imdb",
						}) {
							<span>
								{ props.Movie.ImdbId }
							</span>
							@icon.Icon(icon.Props{Name: icon.ExternalLink})
						}
					}
				}
				if len(props.Movie.Genres) > 0 {
					@list.DlItem(list.DlProps{Detail: "Genres", IsTabular: false}) {
						for _, genre := range props.Movie.Genres {
							@link.Link(link.Props{Href: genre.LinkTo("genre")}) {
								{ genre.Name }
							}
						}
					}
				}
				if len(props.Movie.Languages) > 0 {
					@list.DlItem(list.DlProps{Detail: "Languages", IsTabular: false}) {
						for _, language := range props.Movie.Languages {
							@link.Link(link.Props{Href: language.LinkTo("language")}) {
								{ language.Name }
							}
						}
					}
				}
				if !props.IsInWatchlist {
					if props.Movie.Rating.Valid {
						@rating.Rating(rating.Props{
							MovieId: props.Movie.ID,
							Rating:  props.Movie.Rating.Int64,
							RatedAt: props.Movie.RatedAt.Time,
						})
					} else {
						@rating.AddRating(rating.AddRatingProps{
							MovieId: props.Movie.ID,
						})
					}
				}
				@seen.MovieOthersSeen(seen.MovieOthersSeenProps{
					ID:     props.Movie.ID,
					Others: props.Others,
				})
			}
		}
		@movie.Watched(movie.WatchedProps{
			WatchedAt:   props.WatchedAt,
			IsUnseen:    len(props.WatchedAt) == 0,
			InWatchlist: props.IsInWatchlist,
			ImdbId:      props.Movie.ImdbId,
			ID:          props.Movie.ID,
		})
		@CastList(props.Cast, props.HasCharacters)
		@section.Section(section.Props{Title: "Production companies"}) {
			@list.Ol() {
				for _, c := range props.Movie.ProductionCompanies {
					@list.Li(list.LiProps{Class: "wrapped"}) {
						@link.Link(link.Props{Href: c.LinkTo()}) {
							{ c.Name }
						}
					}
				}
			}
		}
		@section.Section(section.Props{Title: "Production countries"}) {
			@list.Ol() {
				for _, c := range props.Movie.ProductionCountries {
					@list.Li(list.LiProps{Class: "wrapped"}) {
						@link.Link(link.Props{Href: c.LinkTo()}) {
							{ c.Name }
						}
					}
				}
			}
		}
		<div
			hx-swap="outerHTML"
			hx-get={ fmt.Sprintf("/movie/%s/awards", props.Movie.ImdbId) }
			hx-trigger="load"
		></div>
	}
}

templ MovieExists(movie types.Movie) {
	<strong>{ movie.Title }</strong> exists in your library. Would you like to 
	@link.Link(link.Props{
		Href: "#",
		Attrs: templ.Attributes{
			"hx-post": fmt.Sprintf("/movie/%d/seen", movie.ID),
		},
		Style: map[string]templ.SafeCSSProperty{
			"--font-size": "var(--text-xs)",
		}},
	) {
		add a new watch
	}
	?
}
