package views

import (
	c "believer/movies/components"
	"believer/movies/types"
	"fmt"
	"strconv"
)

// TODO: View transition of elements doesn't work because we can't have a
// parameterized "style" attribute in the template. At least yet...
// https://github.com/a-h/templ/issues/88

type MovieProps struct {
	Back          bool
	IsInWatchlist bool
	Movie         types.Movie
	Others        types.OthersStats
	Review        types.Review
}

templ Movie(props MovieProps) {
	@c.Layout(c.LayoutProps{Title: props.Movie.Title, Description: props.Movie.Overview}) {
		@c.StandardBody(props.Movie.Title) {
			if props.Movie.Overview != "" {
				<p class="text-content-secondary">{ props.Movie.Overview }</p>
			}
			@c.Review(props.Review)
			@c.Section("Metadata", 0) {
				@c.DescriptionList() {
					if props.Movie.Tagline != "" {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Tagline"}) {
							{ props.Movie.Tagline }
						}
					}
					if props.Movie.OriginalTitle.Valid && props.Movie.OriginalTitle.String != props.Movie.Title {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Original title"}) {
							{ props.Movie.OriginalTitle.String }
						}
					}
					@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Release date"}) {
						@c.SimpleLink(c.SimpleLinkProps{Href: props.Movie.LinkToYear()}) {
							{ props.Movie.ISOReleaseDate() }
						}
					}
					if props.Movie.Runtime != 0 {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Runtime"}) {
							{ props.Movie.RuntimeFormatted() }
						}
					}
					if props.Movie.Series.Valid && props.Movie.NumberInSeries.Valid {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Series"}) {
							@c.SimpleLink(c.SimpleLinkProps{Href: props.Movie.LinkToSeries()}) {
								{ props.Movie.Series.String } #{ strconv.FormatInt( props.Movie.NumberInSeries.Int64, 10 ) }
							}
						}
					}
					if props.Movie.ImdbId != "tt0000000" {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "IMDb"}) {
							<a
								href={ templ.URL(fmt.Sprintf("https://www.imdb.com/title/%s", props.Movie.ImdbId)) }
								class="inline-flex items-center gap-1 link-focus"
								target="_blank"
								rel="noopener noreferrer"
							>
								<span class="border-b border-dashed border-content-secondary">
									{ props.Movie.ImdbId }
								</span>
								@c.IconExternalLink()
							</a>
						}
					}
					if len(props.Movie.Genres) > 0 {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Genres", IsTabular: false}) {
							<div class="flex flex-wrap gap-2">
								for _, genre := range props.Movie.Genres {
									<a
										class="inline-flex items-center gap-1 border-b border-dashed border-content-secondary link-focus"
										href={ templ.URL(genre.LinkTo("genre")) }
									>
										{ genre.Name }
									</a>
								}
							</div>
						}
					}
					if len(props.Movie.Languages) > 0 {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Languages", IsTabular: false}) {
							<div class="flex flex-wrap gap-2">
								for _, language := range props.Movie.Languages {
									<a
										class="inline-flex items-center gap-1 border-b border-dashed border-content-secondary link-focus"
										href={ templ.URL(language.LinkTo("language")) }
									>
										{ language.Name }
									</a>
								}
							</div>
						}
					}
					if !props.IsInWatchlist {
						if props.Movie.Rating.Valid {
							@c.Rating(c.RatingProps{
								MovieId: props.Movie.ID,
								Rating:  props.Movie.Rating.Int64,
								RatedAt: props.Movie.RatedAt.Time,
							})
						} else {
							@c.AddRating(c.AddRatingProps{
								MovieId: props.Movie.ID,
							})
						}
					}
					if props.Others.Seen > 0 {
						@c.DescriptionListItem(c.DescriptionListItemProps{Detail: "Global rating", IsTabular: true}) {
							<div class="flex gap-x-2 items-center">
								{ strconv.FormatFloat(props.Others.AverageRating, 'f', 1, 64) }
								<span class="text-content-secondary text-xs">
									({ strconv.Itoa(props.Others.Seen) } users)
								</span>
							</div>
						}
					}
				}
			}
			<div
				hx-swap="outerHTML"
				hx-get={ fmt.Sprintf("/movie/%d/seen?imdbId=%s", props.Movie.ID, props.Movie.ImdbId) }
				hx-trigger="load"
			></div>
			<div
				hx-get={ fmt.Sprintf("/movie/%d/cast", props.Movie.ID) }
				hx-trigger="load"
				hx-swap="outerHTML"
			></div>
			<div
				hx-swap="outerHTML"
				hx-get={ fmt.Sprintf("/movie/%s/awards", props.Movie.ImdbId) }
				hx-trigger="load"
			></div>
		}
	}
}
