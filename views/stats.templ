package views

import (
	"believer/movies/components"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
	"strconv"
)

templ statsSection(job string) {
	<section
		hx-get={ fmt.Sprintf("/stats/most-watched-person/%s", job) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></section>
}

type StatsProps struct {
	BestOfTheYear           types.Movie
	BestYear                string
	FormattedTotalRuntime   string
	MostWatchedCast         []components.ListItem
	MostWatchedMovies       []components.ListItem
	MoviesByYear            []types.GraphData
	Ratings                 []types.Bar
	SeenThisYear            []types.Bar
	ShortestAndLongestMovie types.Movies
	Stats                   types.Stats
	TotalCast               int
	WatchedByYear           []types.Bar
	WilhelmScreams          int
	Year                    string
	YearRatings             []types.Bar
	Years                   []string
}

templ Stats(props StatsProps) {
	@Layout(LayoutProps{Title: "Stats"}) {
		<div class="mx-auto flex max-w-xl lg:max-w-5xl flex-col gap-y-8 px-5 pb-8 pt-8 lg:pt-12">
			<nav>
				<div class="left-5 top-5 md:absolute">
					@components.Link(components.LinkProps{Href: "/"}) {
						Home
					}
				</div>
			</nav>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
				<div class="flex flex-col gap-y-8">
					@components.Section("Stats", 0) {
						@components.DescriptionList() {
							@components.DescriptionListItem(components.DescriptionListItemProps{
								Detail:    "Unique movies seen",
								IsTabular: true,
							}) {
								{ strconv.Itoa(props.Stats.UniqueMovies) }
							}
							@components.DescriptionListItem(components.DescriptionListItemProps{
								Detail:    "Movies seen with rewatches",
								IsTabular: true,
							}) {
								{ strconv.Itoa(props.Stats.SeenWithRewatches) }
							}
							@components.DescriptionListItem(components.DescriptionListItemProps{
								Detail:    "Time watched",
								IsTabular: true,
							}) {
								{ props.FormattedTotalRuntime }
							}
							if props.WilhelmScreams > 0 {
								@components.DescriptionListItem(components.DescriptionListItemProps{
									Detail:    "Wilhelm screams",
									IsTabular: true,
								}) {
									{ strconv.Itoa(props.WilhelmScreams) }
								}
							}
							if props.BestOfTheYear.ID != 0 {
								@components.DescriptionListItem(components.DescriptionListItemProps{
									Detail: "Best of the year",
								}) {
									@components.Link(components.LinkProps{Href: templ.URL(fmt.Sprintf("/movie/%d", props.BestOfTheYear.ID))}) {
										{ props.BestOfTheYear.Title }
									}
									if props.BestOfTheYear.Rating.Valid {
										<span class="text-xs">
											({ strconv.FormatInt(props.BestOfTheYear.Rating.Int64, 10) })
										</span>
									}
								}
							}
							if len(props.ShortestAndLongestMovie) == 2 {
								@components.DescriptionListItem(components.DescriptionListItemProps{
									Detail: "Shortest movie",
								}) {
									@components.Link(components.LinkProps{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[0].ID))}) {
										{ props.ShortestAndLongestMovie[0].Title }
									}
									<span class="text-xs">
										({ utils.FormatRuntime(props.ShortestAndLongestMovie[0].Runtime) })
									</span>
								}
								@components.DescriptionListItem(components.DescriptionListItemProps{
									Detail: "Longest movie",
								}) {
									@components.Link(components.LinkProps{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[1].ID))}) {
										{ props.ShortestAndLongestMovie[1].Title }
									}
									<span class="text-xs">
										({ utils.FormatRuntime(props.ShortestAndLongestMovie[1].Runtime) })
									</span>
								}
							}
						}
					}
					@components.Graph(props.WatchedByYear, "Watched by year")
					@components.Graph(props.Ratings, "Ratings")
					@components.GraphWithYear(components.GraphWithYearProps{
						Route:        "/stats/ratings",
						Title:        "Ratings this year",
						Bars:         props.YearRatings,
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					@components.GraphWithYear(components.GraphWithYearProps{
						Route:        "/stats/by-month",
						Title:        "Seen this year by month",
						Bars:         props.SeenThisYear,
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					@components.Section("Movies by year", 0) {
						if len(props.MoviesByYear) > 0 {
							<ol class="flex flex-col gap-2">
								for _, year := range props.MoviesByYear {
									<li
										class={ "flex items-end justify-between gap-4",
                  templ.KV("text-yellow-800 dark:text-yellow-200", props.BestYear == year.Label ) }
									>
										<a
											class="text-sm tabular-nums inline-flex items-center gap-1 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600 border-b border-dashed border-neutral-500 dark:border-neutral-400"
											href={ templ.URL(fmt.Sprintf("/year/%s", year.Label)) }
										>
											{ year.Label }
										</a>
										@components.DividerHighlight(props.BestYear == year.Label)
										<span
											class={ "tabular-nums text-sm relative top-1",
                    templ.KV("text-neutral-500 dark:text-neutral-400", props.BestYear != year.Label) }
										>
											{ strconv.Itoa(year.Value) }
										</span>
									</li>
								}
							</ol>
						} else {
							@components.EmptyState("No movies seen")
						}
					}
				</div>
				<div class="flex flex-col gap-y-8">
					@components.Section("Most watched movies", 0) {
						if len(props.MostWatchedMovies) > 0 {
							@components.OrderedList(props.MostWatchedMovies, "movie")
						} else {
							@components.EmptyState("No movies seen")
						}
					}
					@components.MostWatchedPerson(components.MostWatchedPersonProps{
						Job:   "cast",
						Title: "Cast",
						Data:  props.MostWatchedCast,
						Total: props.TotalCast,
						Year:  "All",
						Years: append([]string{"All"}, props.Years...),
					})
					@statsSection("director")
					@statsSection("writer")
					@statsSection("composer")
					@statsSection("producer")
					<section
						hx-get="/stats/highest-ranked-person"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/genres"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/languages"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
				</div>
			</div>
		</div>
	}
}
