package views

import (
	"believer/movies/components/empty-state"
	"believer/movies/components/graph"
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
	"strconv"
)

templ statsSection(job string) {
	<section
		hx-get={ fmt.Sprintf("/stats/most-watched-person/%s", job) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></section>
}

type StatsProps struct {
	AwardNominations        types.AwardPersonStat
	AwardWins               types.AwardPersonStat
	BestOfTheYear           types.Movie
	BestYear                string
	FormattedTotalRuntime   string
	MostAwardedMovies       []types.AwardMovieStat
	MostWatchedCast         []ListItem
	MostWatchedMovies       []ListItem
	MoviesByYear            []graph.GraphData
	Ratings                 []graph.Bar
	Reviews                 int
	SeenThisYear            []graph.Bar
	ShortestAndLongestMovie types.Movies
	Stats                   types.Stats
	TotalCast               string
	WatchedByYear           []graph.Bar
	WilhelmScreams          int
	Year                    string
	YearRatings             []graph.Bar
	Years                   []string
}

templ Stats(props StatsProps) {
	@layout.Html(layout.Props{Title: "Stats"}) {
		<div class="mx-auto flex max-w-xl lg:max-w-5xl flex-col gap-y-8 px-5 pb-8 pt-8 lg:pt-12">
			<nav>
				<div class="left-5 top-5 md:absolute">
					@link.Link(link.Props{Href: "/"}) {
						Home
					}
				</div>
			</nav>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
				<div class="flex flex-col gap-y-8">
					@section.Section(section.Props{Title: "Stats"}) {
						@list.Dl() {
							@list.DlItem(list.DlProps{
								Detail:    "Unique movies seen",
								IsTabular: true,
							}) {
								{ props.Stats.FormattedNumberOfMoviesSeen() }
							}
							@list.DlItem(list.DlProps{
								Detail:    "Movies seen with rewatches",
								IsTabular: true,
							}) {
								{ props.Stats.FormattedNumberOfMoviesSeenWithRewatches() }
							}
							@list.DlItem(list.DlProps{
								Detail:    "Time watched",
								IsTabular: true,
							}) {
								{ props.FormattedTotalRuntime }
							}
							if props.WilhelmScreams > 0 {
								@list.DlItem(list.DlProps{
									Detail:    "Wilhelm screams",
									IsTabular: true,
								}) {
									{ strconv.Itoa(props.WilhelmScreams) }
								}
							}
							@list.DlItem(list.DlProps{
								Detail:    "Reviews",
								IsTabular: true,
							}) {
								{ strconv.Itoa(props.Reviews) }
							}
							if len(props.ShortestAndLongestMovie) == 2 {
								@list.DlItem(list.DlProps{
									Detail: "Shortest movie",
								}) {
									@link.Link(link.Props{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[0].ID))}) {
										{ props.ShortestAndLongestMovie[0].Title }
									}
									<span class="text-xs">
										({ utils.FormatRuntime(props.ShortestAndLongestMovie[0].Runtime) })
									</span>
								}
								@list.DlItem(list.DlProps{
									Detail: "Longest movie",
								}) {
									@link.Link(link.Props{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[1].ID))}) {
										{ props.ShortestAndLongestMovie[1].Title }
									}
									<span class="text-xs">
										({ utils.FormatRuntime(props.ShortestAndLongestMovie[1].Runtime) })
									</span>
								}
							}
						}
					}
					@section.Section(section.Props{Title: "Academy Awards"}) {
						@list.Dl() {
							@list.DlItem(list.DlProps{
								Detail:    "Most awarded person",
								IsTabular: true,
							}) {
								@link.Link(link.Props{Href: props.AwardWins.LinkTo()}) {
									{ props.AwardWins.Name }
								}
								({ strconv.Itoa( props.AwardWins.Count ) })
							}
							@list.DlItem(list.DlProps{
								Detail:    "Most nominations",
								IsTabular: true,
							}) {
								@link.Link(link.Props{Href: props.AwardNominations.LinkTo()}) {
									{ props.AwardNominations.Name }
								}
								({ strconv.Itoa( props.AwardNominations.Count ) })
							}
							if len(props.MostAwardedMovies) > 0 {
								@list.DlItem(list.DlProps{
									Detail:    fmt.Sprintf("Most wins (%d)", props.MostAwardedMovies[0].Count),
									IsTabular: true,
								}) {
									@list.Ol() {
										for _, m := range props.MostAwardedMovies {
											<div class="flex items-center gap-x-1">
												@link.Link(link.Props{Href: m.LinkTo()}) {
													{ m.Title }
												}
											</div>
										}
									}
								}
							}
						}
					}
					@graph.Graph(graph.Props{
						Bars:  props.WatchedByYear,
						Title: "Watched by year",
					})
					@graph.Graph(graph.Props{
						Bars:  props.Ratings,
						Title: "Ratings",
					})
					@graph.WithYear(graph.WithYearProps{
						Props: graph.Props{
							Title: "Ratings this year",
							Bars:  props.YearRatings,
						},
						Route:        "/stats/ratings",
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					@graph.WithYear(graph.WithYearProps{
						Props: graph.Props{
							Title: "Seen this year by month",
							Bars:  props.SeenThisYear,
						},
						Route:        "/stats/by-month",
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					<section
						hx-get="/stats/best-of-the-year"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					@section.Section(section.Props{Title: "Movies by year"}) {
						if len(props.MoviesByYear) > 0 {
							<ol class="flex flex-col gap-2">
								for _, year := range props.MoviesByYear {
									<li
										class={ "flex items-end justify-between gap-4",
                  templ.KV("text-yellow-800 dark:text-yellow-200", props.BestYear == year.Label ) }
									>
										<a
											class="text-sm tabular-nums inline-flex items-center gap-1 focus:outline-hidden focus-visible:rounded-xs focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600 border-b border-dashed border-neutral-500 dark:border-neutral-400"
											href={ templ.URL(fmt.Sprintf("/year/%s", year.Label)) }
										>
											{ year.Label }
										</a>
										if props.BestYear == year.Label {
											@separator.Separator(separator.Props{Class: "border-yellow-800 dark:border-yellow-100"})
										} else {
											@separator.Separator()
										}
										<span
											class={ "tabular-nums text-sm relative top-1",
                    templ.KV("text-content-secondary", props.BestYear != year.Label) }
										>
											{ strconv.Itoa(year.Value) }
										</span>
									</li>
								}
							</ol>
						} else {
							@emptystate.EmptyState() {
								No movies seen
							}
						}
					}
				</div>
				<div class="flex flex-col gap-y-8">
					@section.Section(section.Props{Title: "Most watched movies"}) {
						if len(props.MostWatchedMovies) > 0 {
							@NumberedList(props.MostWatchedMovies, "movie")
						} else {
							@emptystate.EmptyState() {
								No movies seen
							}
						}
					}
					@MostWatchedPerson(MostWatchedPersonProps{
						Job:   "cast",
						Title: "Cast",
						Data:  props.MostWatchedCast,
						Total: props.TotalCast,
						Year:  "All",
						Years: append([]string{"All"}, props.Years...),
					})
					@statsSection("director")
					@statsSection("writer")
					@statsSection("composer")
					@statsSection("producer")
					<section
						hx-get="/stats/highest-ranked-person"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/genres"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/languages"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
				</div>
			</div>
		</div>
	}
}
