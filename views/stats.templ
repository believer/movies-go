package views

import (
	"believer/movies/components/empty-state"
	"believer/movies/components/graph"
	"believer/movies/components/layout"
	"believer/movies/components/link"
	"believer/movies/components/list"
	"believer/movies/components/navigation"
	"believer/movies/components/section"
	"believer/movies/components/separator"
	"believer/movies/types"
	"believer/movies/utils"
	"fmt"
)

templ statsSection(job string) {
	<section
		hx-get={ fmt.Sprintf("/stats/most-watched-person/%s", job) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></section>
}

type StatsProps struct {
	AwardNominations        types.AwardPersonStat
	AwardWins               types.AwardPersonStat
	BestOfTheYear           types.Movie
	BestYear                string
	FormattedTotalRuntime   string
	MostAwardedMovies       []types.AwardMovieStat
	MostWatchedCast         []types.ListItem
	MostWatchedMovies       []types.ListItem
	MoviesByYear            []graph.GraphData
	Ratings                 []graph.Bar
	Reviews                 int
	SeenThisYear            []graph.Bar
	ShortestAndLongestMovie types.Movies
	Stats                   types.Stats
	TotalCast               string
	WatchedByYear           []graph.Bar
	WilhelmScreams          int
	Year                    string
	YearRatings             []graph.Bar
	Years                   []string
}

templ Stats(props StatsProps) {
	@layout.Html(layout.Props{Title: "Stats"}) {
		<nav>
			@navigation.Home()
		</nav>
		<div class="stats">
			<div class="stats__content">
				<div class="stats__column">
					@section.Section(section.Props{Title: "Stats"}) {
						@list.Dl() {
							@list.DlItem(list.DlProps{
								Detail:    "Unique movies seen",
								IsTabular: true,
							}) {
								{ props.Stats.FormattedNumberOfMoviesSeen() }
							}
							@list.DlItem(list.DlProps{
								Detail:    "Movies seen with rewatches",
								IsTabular: true,
							}) {
								{ props.Stats.FormattedNumberOfMoviesSeenWithRewatches() }
							}
							@list.DlItem(list.DlProps{
								Detail:    "Time watched",
								IsTabular: true,
							}) {
								{ props.FormattedTotalRuntime }
							}
							if props.WilhelmScreams > 0 {
								@list.DlItem(list.DlProps{
									Detail:    "Wilhelm screams",
									IsTabular: true,
								}) {
									{ props.WilhelmScreams }
								}
							}
							@list.DlItem(list.DlProps{
								Detail:    "Reviews",
								IsTabular: true,
							}) {
								{ props.Reviews }
							}
							if len(props.ShortestAndLongestMovie) == 2 {
								@list.DlItem(list.DlProps{
									Detail: "Shortest movie",
								}) {
									@link.Link(link.Props{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[0].ID))}) {
										{ props.ShortestAndLongestMovie[0].Title }
									}
									({ utils.FormatRuntime(props.ShortestAndLongestMovie[0].Runtime) })
								}
								@list.DlItem(list.DlProps{
									Detail: "Longest movie",
								}) {
									@link.Link(link.Props{Href: templ.URL(fmt.Sprintf("/movie/%d", props.ShortestAndLongestMovie[1].ID))}) {
										{ props.ShortestAndLongestMovie[1].Title }
									}
									({ utils.FormatRuntime(props.ShortestAndLongestMovie[1].Runtime) })
								}
							}
						}
					}
					@section.Section(section.Props{Title: "Academy Awards"}) {
						@list.Dl() {
							@list.DlItem(list.DlProps{
								Detail: "Most awarded person",
							}) {
								@link.Link(link.Props{Href: props.AwardWins.LinkTo()}) {
									{ props.AwardWins.Name }
								}
								({  props.AwardWins.Count })
							}
							@list.DlItem(list.DlProps{
								Detail: "Most nominations",
							}) {
								@link.Link(link.Props{Href: props.AwardNominations.LinkTo()}) {
									{ props.AwardNominations.Name }
								}
								({  props.AwardNominations.Count })
							}
							if len(props.MostAwardedMovies) > 0 {
								@list.DlItem(list.DlProps{
									Detail: fmt.Sprintf("Most wins (%d)", props.MostAwardedMovies[0].Count),
								}) {
									@list.Ol() {
										for _, m := range props.MostAwardedMovies {
											@list.Li() {
												@link.Link(link.Props{Href: m.LinkTo()}) {
													{ m.Title }
												}
											}
										}
									}
								}
							}
						}
					}
					@graph.Graph(graph.Props{
						Bars:  props.WatchedByYear,
						Title: "Watched by year",
					})
					@graph.Graph(graph.Props{
						Bars:  props.Ratings,
						Title: "Ratings",
					})
					@graph.WithYear(graph.WithYearProps{
						Props: graph.Props{
							Title: "Ratings this year",
							Bars:  props.YearRatings,
						},
						Route:        "/stats/ratings",
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					@graph.WithYear(graph.WithYearProps{
						Props: graph.Props{
							Title: "Seen this year by month",
							Bars:  props.SeenThisYear,
						},
						Route:        "/stats/by-month",
						SelectedYear: props.Year,
						Years:        props.Years,
					})
					<section
						hx-get="/stats/best-of-the-year"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					@section.Section(section.Props{Title: "Movies by year"}) {
						if len(props.MoviesByYear) > 0 {
							@list.Ol() {
								for _, year := range props.MoviesByYear {
									@list.Li() {
										<a
											class={ "link focus", templ.KV("link--highlight", props.BestYear == year.Label) }
											href={ templ.URL(fmt.Sprintf("/year/%s", year.Label)) }
										>
											{ year.Label }
										</a>
										if props.BestYear == year.Label {
											@separator.Separator(separator.Props{Highlight: true})
										} else {
											@separator.Separator()
										}
										<span
											class="trailing"
											style={ templ.KV("color: var(--color-content-highlight)", props.BestYear == year.Label) }
										>
											{ year.Value }
										</span>
									}
								}
							}
						} else {
							@emptystate.EmptyState() {
								No movies seen
							}
						}
					}
				</div>
				<div class="stats__column">
					@section.Section(section.Props{Title: "Most watched movies"}) {
						if len(props.MostWatchedMovies) > 0 {
							@StatsList(StatsListProps{
								Data: props.MostWatchedMovies,
								Root: "movie",
							})
						} else {
							@emptystate.EmptyState() {
								No movies seen
							}
						}
					}
					@MostWatchedPerson(MostWatchedPersonProps{
						Job:   "cast",
						Title: "Cast",
						Data:  props.MostWatchedCast,
						Total: props.TotalCast,
						Year:  "All",
						Years: append([]string{"All"}, props.Years...),
					})
					@statsSection("director")
					@statsSection("writer")
					@statsSection("composer")
					@statsSection("producer")
					<section
						hx-get="/stats/highest-ranked-person"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/genres"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/languages"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/production-company/stats"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/production-country/stats"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
				</div>
			</div>
		</div>
	}
}
