package views

import (
	"believer/movies/components"
	"believer/movies/types"
	"fmt"
	"strconv"
)

templ Stats(stats types.Stats, formattedTotalRuntime string, mostWatchedCast []components.ListItem, watchedByYear []types.Bar, ratings []types.Bar, yearRatings []types.Bar, mostWatchedMovies []components.ListItem, seenThisYear []types.Bar, bestOfTheYear types.Movie, moviesByYear []types.Bar, bestYear string, year string, years []int) {
	@Layout("Stats", "") {
		<div class="mx-auto flex max-w-xl lg:max-w-5xl flex-col gap-y-8 px-5 pb-8 pt-8 lg:pt-24">
			<nav class="flex items-center gap-5">
				<div class="left-8 top-10 md:absolute">
					@components.Link("/", "", false) {
						Home
					}
				</div>
			</nav>
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
				<div class="flex flex-col gap-y-8">
					@components.Section("Stats", 0) {
						@components.DescriptionList() {
							@components.DescriptionListItem("Unique movies seen", true) {
								{ strconv.Itoa(stats.UniqueMovies) }
							}
							@components.DescriptionListItem("Movies seen with rewatches", true) {
								{ strconv.Itoa(stats.SeenWithRewatches) }
							}
							@components.DescriptionListItem("Time watched", true) {
								{ formattedTotalRuntime }
							}
							@components.DescriptionListItem("Top IMDb rating", true) {
								<a
									class="border-b border-dashed border-neutral-500 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:border-neutral-400 dark:focus-visible:outline-neutral-600"
									href={ templ.URL(fmt.Sprintf("/movies/%s", stats.TopImdbID)) }
								>
									{ stats.TopImdbTitle }
								</a>
								<span class="text-xs">
									({ strconv.FormatFloat(stats.TopImdbRating, 'f', 1, 64) })
								</span>
							}
							if bestOfTheYear.ID != 0 {
								@components.DescriptionListItem("Best of the Year", true) {
									@components.Link(fmt.Sprintf("/movies/%d", bestOfTheYear.ID), "", false) {
										{ bestOfTheYear.Title }
									}
									if bestOfTheYear.Rating.Valid {
										<span class="text-xs">
											({ strconv.FormatInt(bestOfTheYear.Rating.Int64, 10) })
										</span>
									}
								}
							}
						}
					}
					@components.Graph(watchedByYear, "Watched by year")
					@components.Graph(ratings, "Ratings")
					@components.GraphWithYear(yearRatings, "Ratings this year", year, years, "/stats/ratings")
					@components.GraphWithYear(seenThisYear, "Seen this year by month", year, years, "/stats/by-month")
					@components.Section("Movies by year", 0) {
						<ol class="flex flex-col gap-2">
							for _, year := range moviesByYear {
								<li
									class={ "flex items-end justify-between gap-4",
                  templ.KV("text-yellow-800 dark:text-yellow-200", bestYear == year.Label ) }
								>
									<a
										class="text-sm tabular-nums inline-flex items-center gap-1 focus:outline-none focus-visible:rounded-sm focus-visible:outline-dashed focus-visible:outline-offset-2 focus-visible:outline-neutral-400 dark:focus-visible:outline-neutral-600 border-b border-dashed border-neutral-500 dark:border-neutral-400"
										href={ templ.URL(fmt.Sprintf("/movies/year/%s", year.Label)) }
									>
										{ year.Label }
									</a>
									@components.DividerHighlight(bestYear == year.Label)
									<span
										class={ "tabular-nums text-sm relative top-1",
                    templ.KV("text-neutral-500 dark:text-neutral-400", bestYear != year.Label) }
									>
										{ strconv.Itoa(year.Value) }
									</span>
								</li>
							}
						</ol>
					}
				</div>
				<div class="flex flex-col gap-y-8">
					@components.Section("Most watched movies", 0) {
						@components.OrderedList(mostWatchedMovies, "movie")
					}
					@components.Section("Cast", 0) {
						@components.OrderedList(mostWatchedCast, "person")
					}
					<section
						hx-get="/stats/most-watched-person/director"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/most-watched-person/writer"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/most-watched-person/composer"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
					<section
						hx-get="/stats/most-watched-person/producer"
						hx-trigger="load"
						hx-swap="outerHTML"
					></section>
				</div>
			</div>
		</div>
	}
}
